//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.TaskStatus = {
  'STAGING' : 0,
  'STARTING' : 1,
  'RUNNING' : 2,
  'KILLING' : 3,
  'PURGING' : 4,
  'RESTARTING' : 5,
  'FINISHED' : 6,
  'FAILED' : 7,
  'KILLED' : 8,
  'PURGED' : 9,
  'LOST' : 10
};
ttypes.ResponseCode = {
  'INVALID_REQUEST' : 0,
  'OK' : 1,
  'ERROR' : 2,
  'WARNING' : 3
};
Resource = module.exports.Resource = function(args) {
  this.numCpus = null;
  this.ramMb = null;
  this.diskMb = null;
  this.requestedPort = null;
  if (args) {
    if (args.numCpus !== undefined && args.numCpus !== null) {
      this.numCpus = args.numCpus;
    }
    if (args.ramMb !== undefined && args.ramMb !== null) {
      this.ramMb = args.ramMb;
    }
    if (args.diskMb !== undefined && args.diskMb !== null) {
      this.diskMb = args.diskMb;
    }
    if (args.requestedPort !== undefined && args.requestedPort !== null) {
      this.requestedPort = args.requestedPort;
    }
  }
};
Resource.prototype = {};
Resource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.numCpus = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.ramMb = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.diskMb = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.requestedPort = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Resource.prototype.write = function(output) {
  output.writeStructBegin('Resource');
  if (this.numCpus !== null && this.numCpus !== undefined) {
    output.writeFieldBegin('numCpus', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.numCpus);
    output.writeFieldEnd();
  }
  if (this.ramMb !== null && this.ramMb !== undefined) {
    output.writeFieldBegin('ramMb', Thrift.Type.I64, 2);
    output.writeI64(this.ramMb);
    output.writeFieldEnd();
  }
  if (this.diskMb !== null && this.diskMb !== undefined) {
    output.writeFieldBegin('diskMb', Thrift.Type.I64, 3);
    output.writeI64(this.diskMb);
    output.writeFieldEnd();
  }
  if (this.requestedPort !== null && this.requestedPort !== undefined) {
    output.writeFieldBegin('requestedPort', Thrift.Type.STRING, 4);
    output.writeString(this.requestedPort);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetcherURI = module.exports.FetcherURI = function(args) {
  this.locater = null;
  if (args) {
    if (args.locater !== undefined && args.locater !== null) {
      this.locater = args.locater;
    }
  }
};
FetcherURI.prototype = {};
FetcherURI.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.locater = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetcherURI.prototype.write = function(output) {
  output.writeStructBegin('FetcherURI');
  if (this.locater !== null && this.locater !== undefined) {
    output.writeFieldBegin('locater', Thrift.Type.STRING, 1);
    output.writeString(this.locater);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HealthCheckConfiguration = module.exports.HealthCheckConfiguration = function(args) {
};
HealthCheckConfiguration.prototype = {};
HealthCheckConfiguration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HealthCheckConfiguration.prototype.write = function(output) {
  output.writeStructBegin('HealthCheckConfiguration');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MachineDescriptor = module.exports.MachineDescriptor = function(args) {
  this.id = null;
  this.ip = null;
  this.port = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.ip !== undefined && args.ip !== null) {
      this.ip = args.ip;
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
  }
};
MachineDescriptor.prototype = {};
MachineDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MachineDescriptor.prototype.write = function(output) {
  output.writeStructBegin('MachineDescriptor');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 2);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 3);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentID = module.exports.AgentID = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
AgentID.prototype = {};
AgentID.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentID.prototype.write = function(output) {
  output.writeStructBegin('AgentID');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerID = module.exports.SchedulerID = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
SchedulerID.prototype = {};
SchedulerID.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerID.prototype.write = function(output) {
  output.writeStructBegin('SchedulerID');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TaskID = module.exports.TaskID = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
TaskID.prototype = {};
TaskID.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskID.prototype.write = function(output) {
  output.writeStructBegin('TaskID');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatusUpdate = module.exports.StatusUpdate = function(args) {
  this.timestamp = null;
  this.status = null;
  this.message = null;
  this.scheduler = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.scheduler !== undefined && args.scheduler !== null) {
      this.scheduler = new ttypes.SchedulerID(args.scheduler);
    }
  }
};
StatusUpdate.prototype = {};
StatusUpdate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.scheduler = new ttypes.SchedulerID();
        this.scheduler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatusUpdate.prototype.write = function(output) {
  output.writeStructBegin('StatusUpdate');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.scheduler !== null && this.scheduler !== undefined) {
    output.writeFieldBegin('scheduler', Thrift.Type.STRUCT, 4);
    this.scheduler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TaskDescriptor = module.exports.TaskDescriptor = function(args) {
  this.name = null;
  this.id = null;
  this.urlLocater = null;
  this.resources = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.urlLocater !== undefined && args.urlLocater !== null) {
      this.urlLocater = new ttypes.FetcherURI(args.urlLocater);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
  }
};
TaskDescriptor.prototype = {};
TaskDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.urlLocater = new ttypes.FetcherURI();
        this.urlLocater.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.resources = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Resource();
          elem6.read(input);
          this.resources.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskDescriptor.prototype.write = function(output) {
  output.writeStructBegin('TaskDescriptor');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.urlLocater !== null && this.urlLocater !== undefined) {
    output.writeFieldBegin('urlLocater', Thrift.Type.STRUCT, 3);
    this.urlLocater.write(output);
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter7 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter7))
      {
        iter7 = this.resources[iter7];
        iter7.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Task = module.exports.Task = function(args) {
  this.descriptor = null;
  this.agentId = null;
  this.numFailures = null;
  this.status = null;
  this.statusUpdates = null;
  if (args) {
    if (args.descriptor !== undefined && args.descriptor !== null) {
      this.descriptor = new ttypes.TaskDescriptor(args.descriptor);
    }
    if (args.agentId !== undefined && args.agentId !== null) {
      this.agentId = new ttypes.AgentID(args.agentId);
    }
    if (args.numFailures !== undefined && args.numFailures !== null) {
      this.numFailures = args.numFailures;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.statusUpdates !== undefined && args.statusUpdates !== null) {
      this.statusUpdates = Thrift.copyList(args.statusUpdates, [ttypes.StatusUpdate]);
    }
  }
};
Task.prototype = {};
Task.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.descriptor = new ttypes.TaskDescriptor();
        this.descriptor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.agentId = new ttypes.AgentID();
        this.agentId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numFailures = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.statusUpdates = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.StatusUpdate();
          elem14.read(input);
          this.statusUpdates.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Task.prototype.write = function(output) {
  output.writeStructBegin('Task');
  if (this.descriptor !== null && this.descriptor !== undefined) {
    output.writeFieldBegin('descriptor', Thrift.Type.STRUCT, 1);
    this.descriptor.write(output);
    output.writeFieldEnd();
  }
  if (this.agentId !== null && this.agentId !== undefined) {
    output.writeFieldBegin('agentId', Thrift.Type.STRUCT, 2);
    this.agentId.write(output);
    output.writeFieldEnd();
  }
  if (this.numFailures !== null && this.numFailures !== undefined) {
    output.writeFieldBegin('numFailures', Thrift.Type.I32, 3);
    output.writeI32(this.numFailures);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.statusUpdates !== null && this.statusUpdates !== undefined) {
    output.writeFieldBegin('statusUpdates', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.statusUpdates.length);
    for (var iter15 in this.statusUpdates)
    {
      if (this.statusUpdates.hasOwnProperty(iter15))
      {
        iter15 = this.statusUpdates[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Agent = module.exports.Agent = function(args) {
  this.info = null;
  this.lastPingSuccess = null;
  this.lastPingAttempt = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.MachineDescriptor(args.info);
    }
    if (args.lastPingSuccess !== undefined && args.lastPingSuccess !== null) {
      this.lastPingSuccess = args.lastPingSuccess;
    }
    if (args.lastPingAttempt !== undefined && args.lastPingAttempt !== null) {
      this.lastPingAttempt = args.lastPingAttempt;
    }
  }
};
Agent.prototype = {};
Agent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.MachineDescriptor();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastPingSuccess = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastPingAttempt = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Agent.prototype.write = function(output) {
  output.writeStructBegin('Agent');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  if (this.lastPingSuccess !== null && this.lastPingSuccess !== undefined) {
    output.writeFieldBegin('lastPingSuccess', Thrift.Type.I64, 2);
    output.writeI64(this.lastPingSuccess);
    output.writeFieldEnd();
  }
  if (this.lastPingAttempt !== null && this.lastPingAttempt !== undefined) {
    output.writeFieldBegin('lastPingAttempt', Thrift.Type.I64, 3);
    output.writeI64(this.lastPingAttempt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Scheduler = module.exports.Scheduler = function(args) {
  this.info = null;
  this.healthInfo = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.MachineDescriptor(args.info);
    }
    if (args.healthInfo !== undefined && args.healthInfo !== null) {
      this.healthInfo = new ttypes.HealthCheckConfiguration(args.healthInfo);
    }
  }
};
Scheduler.prototype = {};
Scheduler.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.MachineDescriptor();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.healthInfo = new ttypes.HealthCheckConfiguration();
        this.healthInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Scheduler.prototype.write = function(output) {
  output.writeStructBegin('Scheduler');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  if (this.healthInfo !== null && this.healthInfo !== undefined) {
    output.writeFieldBegin('healthInfo', Thrift.Type.STRUCT, 2);
    this.healthInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentRegisterResult = module.exports.AgentRegisterResult = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = new ttypes.AgentID(args.id);
    }
  }
};
AgentRegisterResult.prototype = {};
AgentRegisterResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new ttypes.AgentID();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentRegisterResult.prototype.write = function(output) {
  output.writeStructBegin('AgentRegisterResult');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerRegisterResult = module.exports.SchedulerRegisterResult = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = new ttypes.TaskID(args.id);
    }
  }
};
SchedulerRegisterResult.prototype = {};
SchedulerRegisterResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new ttypes.TaskID();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerRegisterResult.prototype.write = function(output) {
  output.writeStructBegin('SchedulerRegisterResult');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerVerifyTasksResult = module.exports.SchedulerVerifyTasksResult = function(args) {
  this.verifiedTasks = null;
  if (args) {
    if (args.verifiedTasks !== undefined && args.verifiedTasks !== null) {
      this.verifiedTasks = Thrift.copyList(args.verifiedTasks, [ttypes.TaskID]);
    }
  }
};
SchedulerVerifyTasksResult.prototype = {};
SchedulerVerifyTasksResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.verifiedTasks = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.TaskID();
          elem22.read(input);
          this.verifiedTasks.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerVerifyTasksResult.prototype.write = function(output) {
  output.writeStructBegin('SchedulerVerifyTasksResult');
  if (this.verifiedTasks !== null && this.verifiedTasks !== undefined) {
    output.writeFieldBegin('verifiedTasks', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.verifiedTasks.length);
    for (var iter23 in this.verifiedTasks)
    {
      if (this.verifiedTasks.hasOwnProperty(iter23))
      {
        iter23 = this.verifiedTasks[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerGetTaskPortsResult = module.exports.SchedulerGetTaskPortsResult = function(args) {
  this.portStrings = null;
  if (args) {
    if (args.portStrings !== undefined && args.portStrings !== null) {
      this.portStrings = Thrift.copyList(args.portStrings, [null]);
    }
  }
};
SchedulerGetTaskPortsResult.prototype = {};
SchedulerGetTaskPortsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.portStrings = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString();
          this.portStrings.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerGetTaskPortsResult.prototype.write = function(output) {
  output.writeStructBegin('SchedulerGetTaskPortsResult');
  if (this.portStrings !== null && this.portStrings !== undefined) {
    output.writeFieldBegin('portStrings', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.portStrings.length);
    for (var iter31 in this.portStrings)
    {
      if (this.portStrings.hasOwnProperty(iter31))
      {
        iter31 = this.portStrings[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerState = module.exports.SchedulerState = function(args) {
  this.taskList = null;
  this.registeredAgents = null;
  if (args) {
    if (args.taskList !== undefined && args.taskList !== null) {
      this.taskList = Thrift.copyList(args.taskList, [ttypes.Task]);
    }
    if (args.registeredAgents !== undefined && args.registeredAgents !== null) {
      this.registeredAgents = Thrift.copyList(args.registeredAgents, [ttypes.Agent]);
    }
  }
};
SchedulerState.prototype = {};
SchedulerState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.taskList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.Task();
          elem38.read(input);
          this.taskList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.registeredAgents = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new ttypes.Agent();
          elem45.read(input);
          this.registeredAgents.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerState.prototype.write = function(output) {
  output.writeStructBegin('SchedulerState');
  if (this.taskList !== null && this.taskList !== undefined) {
    output.writeFieldBegin('taskList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.taskList.length);
    for (var iter46 in this.taskList)
    {
      if (this.taskList.hasOwnProperty(iter46))
      {
        iter46 = this.taskList[iter46];
        iter46.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.registeredAgents !== null && this.registeredAgents !== undefined) {
    output.writeFieldBegin('registeredAgents', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.registeredAgents.length);
    for (var iter47 in this.registeredAgents)
    {
      if (this.registeredAgents.hasOwnProperty(iter47))
      {
        iter47 = this.registeredAgents[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerGetStateResult = module.exports.SchedulerGetStateResult = function(args) {
  this.state = null;
  if (args) {
    if (args.state !== undefined && args.state !== null) {
      this.state = new ttypes.SchedulerState(args.state);
    }
  }
};
SchedulerGetStateResult.prototype = {};
SchedulerGetStateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.state = new ttypes.SchedulerState();
        this.state.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerGetStateResult.prototype.write = function(output) {
  output.writeStructBegin('SchedulerGetStateResult');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRUCT, 1);
    this.state.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Result = module.exports.Result = function(args) {
  this.agentRegisterResult = null;
  this.schedulerRegisterResult = null;
  this.schedulerVerifyTasksResult = null;
  this.schedulerGetTaskPortsResult = null;
  this.schedulerGetStateResult = null;
  if (args) {
    if (args.agentRegisterResult !== undefined && args.agentRegisterResult !== null) {
      this.agentRegisterResult = new ttypes.AgentRegisterResult(args.agentRegisterResult);
    }
    if (args.schedulerRegisterResult !== undefined && args.schedulerRegisterResult !== null) {
      this.schedulerRegisterResult = new ttypes.SchedulerRegisterResult(args.schedulerRegisterResult);
    }
    if (args.schedulerVerifyTasksResult !== undefined && args.schedulerVerifyTasksResult !== null) {
      this.schedulerVerifyTasksResult = new ttypes.SchedulerVerifyTasksResult(args.schedulerVerifyTasksResult);
    }
    if (args.schedulerGetTaskPortsResult !== undefined && args.schedulerGetTaskPortsResult !== null) {
      this.schedulerGetTaskPortsResult = new ttypes.SchedulerGetTaskPortsResult(args.schedulerGetTaskPortsResult);
    }
    if (args.schedulerGetStateResult !== undefined && args.schedulerGetStateResult !== null) {
      this.schedulerGetStateResult = new ttypes.SchedulerGetStateResult(args.schedulerGetStateResult);
    }
  }
};
Result.prototype = {};
Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.agentRegisterResult = new ttypes.AgentRegisterResult();
        this.agentRegisterResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedulerRegisterResult = new ttypes.SchedulerRegisterResult();
        this.schedulerRegisterResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedulerVerifyTasksResult = new ttypes.SchedulerVerifyTasksResult();
        this.schedulerVerifyTasksResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedulerGetTaskPortsResult = new ttypes.SchedulerGetTaskPortsResult();
        this.schedulerGetTaskPortsResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedulerGetStateResult = new ttypes.SchedulerGetStateResult();
        this.schedulerGetStateResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result.prototype.write = function(output) {
  output.writeStructBegin('Result');
  if (this.agentRegisterResult !== null && this.agentRegisterResult !== undefined) {
    output.writeFieldBegin('agentRegisterResult', Thrift.Type.STRUCT, 1);
    this.agentRegisterResult.write(output);
    output.writeFieldEnd();
  }
  if (this.schedulerRegisterResult !== null && this.schedulerRegisterResult !== undefined) {
    output.writeFieldBegin('schedulerRegisterResult', Thrift.Type.STRUCT, 2);
    this.schedulerRegisterResult.write(output);
    output.writeFieldEnd();
  }
  if (this.schedulerVerifyTasksResult !== null && this.schedulerVerifyTasksResult !== undefined) {
    output.writeFieldBegin('schedulerVerifyTasksResult', Thrift.Type.STRUCT, 3);
    this.schedulerVerifyTasksResult.write(output);
    output.writeFieldEnd();
  }
  if (this.schedulerGetTaskPortsResult !== null && this.schedulerGetTaskPortsResult !== undefined) {
    output.writeFieldBegin('schedulerGetTaskPortsResult', Thrift.Type.STRUCT, 4);
    this.schedulerGetTaskPortsResult.write(output);
    output.writeFieldEnd();
  }
  if (this.schedulerGetStateResult !== null && this.schedulerGetStateResult !== undefined) {
    output.writeFieldBegin('schedulerGetStateResult', Thrift.Type.STRUCT, 5);
    this.schedulerGetStateResult.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Response = module.exports.Response = function(args) {
  this.responseCode = null;
  this.result = null;
  if (args) {
    if (args.responseCode !== undefined && args.responseCode !== null) {
      this.responseCode = args.responseCode;
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = new ttypes.Result(args.result);
    }
  }
};
Response.prototype = {};
Response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.responseCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Response.prototype.write = function(output) {
  output.writeStructBegin('Response');
  if (this.responseCode !== null && this.responseCode !== undefined) {
    output.writeFieldBegin('responseCode', Thrift.Type.I32, 1);
    output.writeI32(this.responseCode);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 2);
    this.result.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.DEFAULT_QUORUM_STR = '127.0.0.1:2181';
ttypes.LEADER_PATH = '/apollo/leader';
ttypes.ACTIVE_STATES = [1,2,3,4,5];
ttypes.TERMINAL_STATES = [6,7,8,10,9,0];
