//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Apollo_ttypes = require('./Apollo_types')


var ttypes = require('./Scheduler_types');
//HELPER FUNCTIONS AND STRUCTURES

SchedulerAdminService_registerTask_args = function(args) {
  this.task = null;
  if (args) {
    if (args.task !== undefined && args.task !== null) {
      this.task = new Apollo_ttypes.TaskDescriptor(args.task);
    }
  }
};
SchedulerAdminService_registerTask_args.prototype = {};
SchedulerAdminService_registerTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.task = new Apollo_ttypes.TaskDescriptor();
        this.task.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_registerTask_args.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_registerTask_args');
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRUCT, 1);
    this.task.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_registerTask_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.SchedulerTaskRegistrationException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Apollo_ttypes.Response(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SchedulerAdminService_registerTask_result.prototype = {};
SchedulerAdminService_registerTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Apollo_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SchedulerTaskRegistrationException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_registerTask_result.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_registerTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_killTask_args = function(args) {
  this.task = null;
  if (args) {
    if (args.task !== undefined && args.task !== null) {
      this.task = new Apollo_ttypes.TaskID(args.task);
    }
  }
};
SchedulerAdminService_killTask_args.prototype = {};
SchedulerAdminService_killTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.task = new Apollo_ttypes.TaskID();
        this.task.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_killTask_args.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_killTask_args');
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRUCT, 1);
    this.task.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_killTask_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.SchedulerTaskKillException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Apollo_ttypes.Response(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SchedulerAdminService_killTask_result.prototype = {};
SchedulerAdminService_killTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Apollo_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SchedulerTaskKillException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_killTask_result.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_killTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_getAllAgentInfo_args = function(args) {
};
SchedulerAdminService_getAllAgentInfo_args.prototype = {};
SchedulerAdminService_getAllAgentInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_getAllAgentInfo_args.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_getAllAgentInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_getAllAgentInfo_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.SchedulerAgentInfoRequestException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Apollo_ttypes.Response(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SchedulerAdminService_getAllAgentInfo_result.prototype = {};
SchedulerAdminService_getAllAgentInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Apollo_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SchedulerAgentInfoRequestException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_getAllAgentInfo_result.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_getAllAgentInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_getTaskHealth_args = function(args) {
  this.task = null;
  if (args) {
    if (args.task !== undefined && args.task !== null) {
      this.task = new Apollo_ttypes.TaskID(args.task);
    }
  }
};
SchedulerAdminService_getTaskHealth_args.prototype = {};
SchedulerAdminService_getTaskHealth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.task = new Apollo_ttypes.TaskID();
        this.task.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_getTaskHealth_args.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_getTaskHealth_args');
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRUCT, 1);
    this.task.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_getTaskHealth_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.SchedulerTaskStatusRequestException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Apollo_ttypes.Response(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SchedulerAdminService_getTaskHealth_result.prototype = {};
SchedulerAdminService_getTaskHealth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Apollo_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SchedulerTaskStatusRequestException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_getTaskHealth_result.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_getTaskHealth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_getAllTaskHealth_args = function(args) {
};
SchedulerAdminService_getAllTaskHealth_args.prototype = {};
SchedulerAdminService_getAllTaskHealth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_getAllTaskHealth_args.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_getAllTaskHealth_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_getAllTaskHealth_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.SchedulerTaskStatusRequestException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Apollo_ttypes.Response(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SchedulerAdminService_getAllTaskHealth_result.prototype = {};
SchedulerAdminService_getAllTaskHealth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Apollo_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SchedulerTaskStatusRequestException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_getAllTaskHealth_result.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_getAllTaskHealth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_takeSnapshot_args = function(args) {
};
SchedulerAdminService_takeSnapshot_args.prototype = {};
SchedulerAdminService_takeSnapshot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_takeSnapshot_args.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_takeSnapshot_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_takeSnapshot_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.SchedulerSnapshotException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Apollo_ttypes.Response(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SchedulerAdminService_takeSnapshot_result.prototype = {};
SchedulerAdminService_takeSnapshot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Apollo_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SchedulerSnapshotException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_takeSnapshot_result.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_takeSnapshot_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_kill_args = function(args) {
};
SchedulerAdminService_kill_args.prototype = {};
SchedulerAdminService_kill_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_kill_args.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_kill_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_kill_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Apollo_ttypes.Response(args.success);
    }
  }
};
SchedulerAdminService_kill_result.prototype = {};
SchedulerAdminService_kill_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Apollo_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_kill_result.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_kill_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_getTaskPorts_args = function(args) {
  this.task = null;
  if (args) {
    if (args.task !== undefined && args.task !== null) {
      this.task = new Apollo_ttypes.TaskID(args.task);
    }
  }
};
SchedulerAdminService_getTaskPorts_args.prototype = {};
SchedulerAdminService_getTaskPorts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.task = new Apollo_ttypes.TaskID();
        this.task.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_getTaskPorts_args.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_getTaskPorts_args');
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRUCT, 1);
    this.task.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminService_getTaskPorts_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Apollo_ttypes.Response(args.success);
    }
  }
};
SchedulerAdminService_getTaskPorts_result.prototype = {};
SchedulerAdminService_getTaskPorts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Apollo_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerAdminService_getTaskPorts_result.prototype.write = function(output) {
  output.writeStructBegin('SchedulerAdminService_getTaskPorts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerAdminServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
SchedulerAdminServiceClient.prototype = {};
SchedulerAdminServiceClient.prototype.seqid = function() { return this._seqid; }
SchedulerAdminServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
SchedulerAdminServiceClient.prototype.registerTask = function(task, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerTask(task);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerTask(task);
  }
};

SchedulerAdminServiceClient.prototype.send_registerTask = function(task) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerTask', Thrift.MessageType.CALL, this.seqid());
  var args = new SchedulerAdminService_registerTask_args();
  args.task = task;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SchedulerAdminServiceClient.prototype.recv_registerTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SchedulerAdminService_registerTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerTask failed: unknown result');
};
SchedulerAdminServiceClient.prototype.killTask = function(task, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_killTask(task);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_killTask(task);
  }
};

SchedulerAdminServiceClient.prototype.send_killTask = function(task) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('killTask', Thrift.MessageType.CALL, this.seqid());
  var args = new SchedulerAdminService_killTask_args();
  args.task = task;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SchedulerAdminServiceClient.prototype.recv_killTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SchedulerAdminService_killTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('killTask failed: unknown result');
};
SchedulerAdminServiceClient.prototype.getAllAgentInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllAgentInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllAgentInfo();
  }
};

SchedulerAdminServiceClient.prototype.send_getAllAgentInfo = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllAgentInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new SchedulerAdminService_getAllAgentInfo_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SchedulerAdminServiceClient.prototype.recv_getAllAgentInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SchedulerAdminService_getAllAgentInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllAgentInfo failed: unknown result');
};
SchedulerAdminServiceClient.prototype.getTaskHealth = function(task, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTaskHealth(task);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTaskHealth(task);
  }
};

SchedulerAdminServiceClient.prototype.send_getTaskHealth = function(task) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTaskHealth', Thrift.MessageType.CALL, this.seqid());
  var args = new SchedulerAdminService_getTaskHealth_args();
  args.task = task;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SchedulerAdminServiceClient.prototype.recv_getTaskHealth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SchedulerAdminService_getTaskHealth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTaskHealth failed: unknown result');
};
SchedulerAdminServiceClient.prototype.getAllTaskHealth = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllTaskHealth();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllTaskHealth();
  }
};

SchedulerAdminServiceClient.prototype.send_getAllTaskHealth = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllTaskHealth', Thrift.MessageType.CALL, this.seqid());
  var args = new SchedulerAdminService_getAllTaskHealth_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SchedulerAdminServiceClient.prototype.recv_getAllTaskHealth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SchedulerAdminService_getAllTaskHealth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllTaskHealth failed: unknown result');
};
SchedulerAdminServiceClient.prototype.takeSnapshot = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_takeSnapshot();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_takeSnapshot();
  }
};

SchedulerAdminServiceClient.prototype.send_takeSnapshot = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('takeSnapshot', Thrift.MessageType.CALL, this.seqid());
  var args = new SchedulerAdminService_takeSnapshot_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SchedulerAdminServiceClient.prototype.recv_takeSnapshot = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SchedulerAdminService_takeSnapshot_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('takeSnapshot failed: unknown result');
};
SchedulerAdminServiceClient.prototype.kill = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_kill();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_kill();
  }
};

SchedulerAdminServiceClient.prototype.send_kill = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('kill', Thrift.MessageType.CALL, this.seqid());
  var args = new SchedulerAdminService_kill_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SchedulerAdminServiceClient.prototype.recv_kill = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SchedulerAdminService_kill_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('kill failed: unknown result');
};
SchedulerAdminServiceClient.prototype.getTaskPorts = function(task, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTaskPorts(task);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTaskPorts(task);
  }
};

SchedulerAdminServiceClient.prototype.send_getTaskPorts = function(task) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTaskPorts', Thrift.MessageType.CALL, this.seqid());
  var args = new SchedulerAdminService_getTaskPorts_args();
  args.task = task;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SchedulerAdminServiceClient.prototype.recv_getTaskPorts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SchedulerAdminService_getTaskPorts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTaskPorts failed: unknown result');
};
SchedulerAdminServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
SchedulerAdminServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

SchedulerAdminServiceProcessor.prototype.process_registerTask = function(seqid, input, output) {
  var args = new SchedulerAdminService_registerTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerTask.length === 1) {
    Q.fcall(this._handler.registerTask, args.task)
      .then(function(result) {
        var result = new SchedulerAdminService_registerTask_result({success: result});
        output.writeMessageBegin("registerTask", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.SchedulerTaskRegistrationException) {
          var result = new SchedulerAdminService_registerTask_result(err);
          output.writeMessageBegin("registerTask", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerTask(args.task, function (err, result) {
      if (err == null || err instanceof ttypes.SchedulerTaskRegistrationException) {
        var result = new SchedulerAdminService_registerTask_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerTask", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SchedulerAdminServiceProcessor.prototype.process_killTask = function(seqid, input, output) {
  var args = new SchedulerAdminService_killTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.killTask.length === 1) {
    Q.fcall(this._handler.killTask, args.task)
      .then(function(result) {
        var result = new SchedulerAdminService_killTask_result({success: result});
        output.writeMessageBegin("killTask", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.SchedulerTaskKillException) {
          var result = new SchedulerAdminService_killTask_result(err);
          output.writeMessageBegin("killTask", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("killTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.killTask(args.task, function (err, result) {
      if (err == null || err instanceof ttypes.SchedulerTaskKillException) {
        var result = new SchedulerAdminService_killTask_result((err != null ? err : {success: result}));
        output.writeMessageBegin("killTask", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("killTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SchedulerAdminServiceProcessor.prototype.process_getAllAgentInfo = function(seqid, input, output) {
  var args = new SchedulerAdminService_getAllAgentInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllAgentInfo.length === 0) {
    Q.fcall(this._handler.getAllAgentInfo)
      .then(function(result) {
        var result = new SchedulerAdminService_getAllAgentInfo_result({success: result});
        output.writeMessageBegin("getAllAgentInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.SchedulerAgentInfoRequestException) {
          var result = new SchedulerAdminService_getAllAgentInfo_result(err);
          output.writeMessageBegin("getAllAgentInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllAgentInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllAgentInfo(function (err, result) {
      if (err == null || err instanceof ttypes.SchedulerAgentInfoRequestException) {
        var result = new SchedulerAdminService_getAllAgentInfo_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getAllAgentInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllAgentInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SchedulerAdminServiceProcessor.prototype.process_getTaskHealth = function(seqid, input, output) {
  var args = new SchedulerAdminService_getTaskHealth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTaskHealth.length === 1) {
    Q.fcall(this._handler.getTaskHealth, args.task)
      .then(function(result) {
        var result = new SchedulerAdminService_getTaskHealth_result({success: result});
        output.writeMessageBegin("getTaskHealth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.SchedulerTaskStatusRequestException) {
          var result = new SchedulerAdminService_getTaskHealth_result(err);
          output.writeMessageBegin("getTaskHealth", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getTaskHealth", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTaskHealth(args.task, function (err, result) {
      if (err == null || err instanceof ttypes.SchedulerTaskStatusRequestException) {
        var result = new SchedulerAdminService_getTaskHealth_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getTaskHealth", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTaskHealth", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SchedulerAdminServiceProcessor.prototype.process_getAllTaskHealth = function(seqid, input, output) {
  var args = new SchedulerAdminService_getAllTaskHealth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllTaskHealth.length === 0) {
    Q.fcall(this._handler.getAllTaskHealth)
      .then(function(result) {
        var result = new SchedulerAdminService_getAllTaskHealth_result({success: result});
        output.writeMessageBegin("getAllTaskHealth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.SchedulerTaskStatusRequestException) {
          var result = new SchedulerAdminService_getAllTaskHealth_result(err);
          output.writeMessageBegin("getAllTaskHealth", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllTaskHealth", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllTaskHealth(function (err, result) {
      if (err == null || err instanceof ttypes.SchedulerTaskStatusRequestException) {
        var result = new SchedulerAdminService_getAllTaskHealth_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getAllTaskHealth", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllTaskHealth", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SchedulerAdminServiceProcessor.prototype.process_takeSnapshot = function(seqid, input, output) {
  var args = new SchedulerAdminService_takeSnapshot_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.takeSnapshot.length === 0) {
    Q.fcall(this._handler.takeSnapshot)
      .then(function(result) {
        var result = new SchedulerAdminService_takeSnapshot_result({success: result});
        output.writeMessageBegin("takeSnapshot", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.SchedulerSnapshotException) {
          var result = new SchedulerAdminService_takeSnapshot_result(err);
          output.writeMessageBegin("takeSnapshot", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("takeSnapshot", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.takeSnapshot(function (err, result) {
      if (err == null || err instanceof ttypes.SchedulerSnapshotException) {
        var result = new SchedulerAdminService_takeSnapshot_result((err != null ? err : {success: result}));
        output.writeMessageBegin("takeSnapshot", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("takeSnapshot", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SchedulerAdminServiceProcessor.prototype.process_kill = function(seqid, input, output) {
  var args = new SchedulerAdminService_kill_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.kill.length === 0) {
    Q.fcall(this._handler.kill)
      .then(function(result) {
        var result = new SchedulerAdminService_kill_result({success: result});
        output.writeMessageBegin("kill", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("kill", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.kill(function (err, result) {
      if (err == null) {
        var result = new SchedulerAdminService_kill_result((err != null ? err : {success: result}));
        output.writeMessageBegin("kill", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("kill", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SchedulerAdminServiceProcessor.prototype.process_getTaskPorts = function(seqid, input, output) {
  var args = new SchedulerAdminService_getTaskPorts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTaskPorts.length === 1) {
    Q.fcall(this._handler.getTaskPorts, args.task)
      .then(function(result) {
        var result = new SchedulerAdminService_getTaskPorts_result({success: result});
        output.writeMessageBegin("getTaskPorts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTaskPorts", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTaskPorts(args.task, function (err, result) {
      if (err == null) {
        var result = new SchedulerAdminService_getTaskPorts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getTaskPorts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTaskPorts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

