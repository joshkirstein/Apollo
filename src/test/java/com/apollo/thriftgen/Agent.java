/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.apollo.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-14")
public class Agent implements org.apache.thrift.TBase<Agent, Agent._Fields>, java.io.Serializable, Cloneable, Comparable<Agent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Agent");

  private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_PING_SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPingSuccess", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_PING_ATTEMPT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPingAttempt", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AgentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AgentTupleSchemeFactory());
  }

  public MachineDescriptor info; // required
  public long lastPingSuccess; // required
  public long lastPingAttempt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INFO((short)1, "info"),
    LAST_PING_SUCCESS((short)2, "lastPingSuccess"),
    LAST_PING_ATTEMPT((short)3, "lastPingAttempt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INFO
          return INFO;
        case 2: // LAST_PING_SUCCESS
          return LAST_PING_SUCCESS;
        case 3: // LAST_PING_ATTEMPT
          return LAST_PING_ATTEMPT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTPINGSUCCESS_ISSET_ID = 0;
  private static final int __LASTPINGATTEMPT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MachineDescriptor.class)));
    tmpMap.put(_Fields.LAST_PING_SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("lastPingSuccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_PING_ATTEMPT, new org.apache.thrift.meta_data.FieldMetaData("lastPingAttempt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Agent.class, metaDataMap);
  }

  public Agent() {
  }

  public Agent(
    MachineDescriptor info,
    long lastPingSuccess,
    long lastPingAttempt)
  {
    this();
    this.info = info;
    this.lastPingSuccess = lastPingSuccess;
    setLastPingSuccessIsSet(true);
    this.lastPingAttempt = lastPingAttempt;
    setLastPingAttemptIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Agent(Agent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInfo()) {
      this.info = new MachineDescriptor(other.info);
    }
    this.lastPingSuccess = other.lastPingSuccess;
    this.lastPingAttempt = other.lastPingAttempt;
  }

  public Agent deepCopy() {
    return new Agent(this);
  }

  @Override
  public void clear() {
    this.info = null;
    setLastPingSuccessIsSet(false);
    this.lastPingSuccess = 0;
    setLastPingAttemptIsSet(false);
    this.lastPingAttempt = 0;
  }

  public MachineDescriptor getInfo() {
    return this.info;
  }

  public Agent setInfo(MachineDescriptor info) {
    this.info = info;
    return this;
  }

  public void unsetInfo() {
    this.info = null;
  }

  /** Returns true if field info is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo() {
    return this.info != null;
  }

  public void setInfoIsSet(boolean value) {
    if (!value) {
      this.info = null;
    }
  }

  public long getLastPingSuccess() {
    return this.lastPingSuccess;
  }

  public Agent setLastPingSuccess(long lastPingSuccess) {
    this.lastPingSuccess = lastPingSuccess;
    setLastPingSuccessIsSet(true);
    return this;
  }

  public void unsetLastPingSuccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPINGSUCCESS_ISSET_ID);
  }

  /** Returns true if field lastPingSuccess is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPingSuccess() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPINGSUCCESS_ISSET_ID);
  }

  public void setLastPingSuccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPINGSUCCESS_ISSET_ID, value);
  }

  public long getLastPingAttempt() {
    return this.lastPingAttempt;
  }

  public Agent setLastPingAttempt(long lastPingAttempt) {
    this.lastPingAttempt = lastPingAttempt;
    setLastPingAttemptIsSet(true);
    return this;
  }

  public void unsetLastPingAttempt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPINGATTEMPT_ISSET_ID);
  }

  /** Returns true if field lastPingAttempt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPingAttempt() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPINGATTEMPT_ISSET_ID);
  }

  public void setLastPingAttemptIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPINGATTEMPT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INFO:
      if (value == null) {
        unsetInfo();
      } else {
        setInfo((MachineDescriptor)value);
      }
      break;

    case LAST_PING_SUCCESS:
      if (value == null) {
        unsetLastPingSuccess();
      } else {
        setLastPingSuccess((Long)value);
      }
      break;

    case LAST_PING_ATTEMPT:
      if (value == null) {
        unsetLastPingAttempt();
      } else {
        setLastPingAttempt((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INFO:
      return getInfo();

    case LAST_PING_SUCCESS:
      return getLastPingSuccess();

    case LAST_PING_ATTEMPT:
      return getLastPingAttempt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INFO:
      return isSetInfo();
    case LAST_PING_SUCCESS:
      return isSetLastPingSuccess();
    case LAST_PING_ATTEMPT:
      return isSetLastPingAttempt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Agent)
      return this.equals((Agent)that);
    return false;
  }

  public boolean equals(Agent that) {
    if (that == null)
      return false;

    boolean this_present_info = true && this.isSetInfo();
    boolean that_present_info = true && that.isSetInfo();
    if (this_present_info || that_present_info) {
      if (!(this_present_info && that_present_info))
        return false;
      if (!this.info.equals(that.info))
        return false;
    }

    boolean this_present_lastPingSuccess = true;
    boolean that_present_lastPingSuccess = true;
    if (this_present_lastPingSuccess || that_present_lastPingSuccess) {
      if (!(this_present_lastPingSuccess && that_present_lastPingSuccess))
        return false;
      if (this.lastPingSuccess != that.lastPingSuccess)
        return false;
    }

    boolean this_present_lastPingAttempt = true;
    boolean that_present_lastPingAttempt = true;
    if (this_present_lastPingAttempt || that_present_lastPingAttempt) {
      if (!(this_present_lastPingAttempt && that_present_lastPingAttempt))
        return false;
      if (this.lastPingAttempt != that.lastPingAttempt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_info = true && (isSetInfo());
    list.add(present_info);
    if (present_info)
      list.add(info);

    boolean present_lastPingSuccess = true;
    list.add(present_lastPingSuccess);
    if (present_lastPingSuccess)
      list.add(lastPingSuccess);

    boolean present_lastPingAttempt = true;
    list.add(present_lastPingAttempt);
    if (present_lastPingAttempt)
      list.add(lastPingAttempt);

    return list.hashCode();
  }

  @Override
  public int compareTo(Agent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInfo()).compareTo(other.isSetInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPingSuccess()).compareTo(other.isSetLastPingSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPingSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPingSuccess, other.lastPingSuccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPingAttempt()).compareTo(other.isSetLastPingAttempt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPingAttempt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPingAttempt, other.lastPingAttempt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Agent(");
    boolean first = true;

    sb.append("info:");
    if (this.info == null) {
      sb.append("null");
    } else {
      sb.append(this.info);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastPingSuccess:");
    sb.append(this.lastPingSuccess);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastPingAttempt:");
    sb.append(this.lastPingAttempt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (info != null) {
      info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AgentStandardSchemeFactory implements SchemeFactory {
    public AgentStandardScheme getScheme() {
      return new AgentStandardScheme();
    }
  }

  private static class AgentStandardScheme extends StandardScheme<Agent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Agent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.info = new MachineDescriptor();
              struct.info.read(iprot);
              struct.setInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST_PING_SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastPingSuccess = iprot.readI64();
              struct.setLastPingSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_PING_ATTEMPT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastPingAttempt = iprot.readI64();
              struct.setLastPingAttemptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Agent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.info != null) {
        oprot.writeFieldBegin(INFO_FIELD_DESC);
        struct.info.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_PING_SUCCESS_FIELD_DESC);
      oprot.writeI64(struct.lastPingSuccess);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_PING_ATTEMPT_FIELD_DESC);
      oprot.writeI64(struct.lastPingAttempt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AgentTupleSchemeFactory implements SchemeFactory {
    public AgentTupleScheme getScheme() {
      return new AgentTupleScheme();
    }
  }

  private static class AgentTupleScheme extends TupleScheme<Agent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Agent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInfo()) {
        optionals.set(0);
      }
      if (struct.isSetLastPingSuccess()) {
        optionals.set(1);
      }
      if (struct.isSetLastPingAttempt()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetInfo()) {
        struct.info.write(oprot);
      }
      if (struct.isSetLastPingSuccess()) {
        oprot.writeI64(struct.lastPingSuccess);
      }
      if (struct.isSetLastPingAttempt()) {
        oprot.writeI64(struct.lastPingAttempt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Agent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.info = new MachineDescriptor();
        struct.info.read(iprot);
        struct.setInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastPingSuccess = iprot.readI64();
        struct.setLastPingSuccessIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastPingAttempt = iprot.readI64();
        struct.setLastPingAttemptIsSet(true);
      }
    }
  }

}

