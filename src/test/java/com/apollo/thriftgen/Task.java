/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.apollo.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-14")
public class Task implements org.apache.thrift.TBase<Task, Task._Fields>, java.io.Serializable, Cloneable, Comparable<Task> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Task");

  private static final org.apache.thrift.protocol.TField DESCRIPTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("descriptor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_FAILURES_FIELD_DESC = new org.apache.thrift.protocol.TField("numFailures", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_UPDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("statusUpdates", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskTupleSchemeFactory());
  }

  public TaskDescriptor descriptor; // required
  public AgentID agentId; // required
  public int numFailures; // required
  /**
   * 
   * @see TaskStatus
   */
  public TaskStatus status; // required
  public List<StatusUpdate> statusUpdates; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DESCRIPTOR((short)1, "descriptor"),
    AGENT_ID((short)2, "agentId"),
    NUM_FAILURES((short)3, "numFailures"),
    /**
     * 
     * @see TaskStatus
     */
    STATUS((short)4, "status"),
    STATUS_UPDATES((short)5, "statusUpdates");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DESCRIPTOR
          return DESCRIPTOR;
        case 2: // AGENT_ID
          return AGENT_ID;
        case 3: // NUM_FAILURES
          return NUM_FAILURES;
        case 4: // STATUS
          return STATUS;
        case 5: // STATUS_UPDATES
          return STATUS_UPDATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMFAILURES_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DESCRIPTOR, new org.apache.thrift.meta_data.FieldMetaData("descriptor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskDescriptor.class)));
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("agentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgentID.class)));
    tmpMap.put(_Fields.NUM_FAILURES, new org.apache.thrift.meta_data.FieldMetaData("numFailures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TaskStatus.class)));
    tmpMap.put(_Fields.STATUS_UPDATES, new org.apache.thrift.meta_data.FieldMetaData("statusUpdates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusUpdate.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Task.class, metaDataMap);
  }

  public Task() {
  }

  public Task(
    TaskDescriptor descriptor,
    AgentID agentId,
    int numFailures,
    TaskStatus status,
    List<StatusUpdate> statusUpdates)
  {
    this();
    this.descriptor = descriptor;
    this.agentId = agentId;
    this.numFailures = numFailures;
    setNumFailuresIsSet(true);
    this.status = status;
    this.statusUpdates = statusUpdates;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Task(Task other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDescriptor()) {
      this.descriptor = new TaskDescriptor(other.descriptor);
    }
    if (other.isSetAgentId()) {
      this.agentId = new AgentID(other.agentId);
    }
    this.numFailures = other.numFailures;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetStatusUpdates()) {
      List<StatusUpdate> __this__statusUpdates = new ArrayList<StatusUpdate>(other.statusUpdates.size());
      for (StatusUpdate other_element : other.statusUpdates) {
        __this__statusUpdates.add(new StatusUpdate(other_element));
      }
      this.statusUpdates = __this__statusUpdates;
    }
  }

  public Task deepCopy() {
    return new Task(this);
  }

  @Override
  public void clear() {
    this.descriptor = null;
    this.agentId = null;
    setNumFailuresIsSet(false);
    this.numFailures = 0;
    this.status = null;
    this.statusUpdates = null;
  }

  public TaskDescriptor getDescriptor() {
    return this.descriptor;
  }

  public Task setDescriptor(TaskDescriptor descriptor) {
    this.descriptor = descriptor;
    return this;
  }

  public void unsetDescriptor() {
    this.descriptor = null;
  }

  /** Returns true if field descriptor is set (has been assigned a value) and false otherwise */
  public boolean isSetDescriptor() {
    return this.descriptor != null;
  }

  public void setDescriptorIsSet(boolean value) {
    if (!value) {
      this.descriptor = null;
    }
  }

  public AgentID getAgentId() {
    return this.agentId;
  }

  public Task setAgentId(AgentID agentId) {
    this.agentId = agentId;
    return this;
  }

  public void unsetAgentId() {
    this.agentId = null;
  }

  /** Returns true if field agentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentId() {
    return this.agentId != null;
  }

  public void setAgentIdIsSet(boolean value) {
    if (!value) {
      this.agentId = null;
    }
  }

  public int getNumFailures() {
    return this.numFailures;
  }

  public Task setNumFailures(int numFailures) {
    this.numFailures = numFailures;
    setNumFailuresIsSet(true);
    return this;
  }

  public void unsetNumFailures() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMFAILURES_ISSET_ID);
  }

  /** Returns true if field numFailures is set (has been assigned a value) and false otherwise */
  public boolean isSetNumFailures() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMFAILURES_ISSET_ID);
  }

  public void setNumFailuresIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMFAILURES_ISSET_ID, value);
  }

  /**
   * 
   * @see TaskStatus
   */
  public TaskStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see TaskStatus
   */
  public Task setStatus(TaskStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getStatusUpdatesSize() {
    return (this.statusUpdates == null) ? 0 : this.statusUpdates.size();
  }

  public java.util.Iterator<StatusUpdate> getStatusUpdatesIterator() {
    return (this.statusUpdates == null) ? null : this.statusUpdates.iterator();
  }

  public void addToStatusUpdates(StatusUpdate elem) {
    if (this.statusUpdates == null) {
      this.statusUpdates = new ArrayList<StatusUpdate>();
    }
    this.statusUpdates.add(elem);
  }

  public List<StatusUpdate> getStatusUpdates() {
    return this.statusUpdates;
  }

  public Task setStatusUpdates(List<StatusUpdate> statusUpdates) {
    this.statusUpdates = statusUpdates;
    return this;
  }

  public void unsetStatusUpdates() {
    this.statusUpdates = null;
  }

  /** Returns true if field statusUpdates is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusUpdates() {
    return this.statusUpdates != null;
  }

  public void setStatusUpdatesIsSet(boolean value) {
    if (!value) {
      this.statusUpdates = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DESCRIPTOR:
      if (value == null) {
        unsetDescriptor();
      } else {
        setDescriptor((TaskDescriptor)value);
      }
      break;

    case AGENT_ID:
      if (value == null) {
        unsetAgentId();
      } else {
        setAgentId((AgentID)value);
      }
      break;

    case NUM_FAILURES:
      if (value == null) {
        unsetNumFailures();
      } else {
        setNumFailures((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((TaskStatus)value);
      }
      break;

    case STATUS_UPDATES:
      if (value == null) {
        unsetStatusUpdates();
      } else {
        setStatusUpdates((List<StatusUpdate>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DESCRIPTOR:
      return getDescriptor();

    case AGENT_ID:
      return getAgentId();

    case NUM_FAILURES:
      return getNumFailures();

    case STATUS:
      return getStatus();

    case STATUS_UPDATES:
      return getStatusUpdates();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DESCRIPTOR:
      return isSetDescriptor();
    case AGENT_ID:
      return isSetAgentId();
    case NUM_FAILURES:
      return isSetNumFailures();
    case STATUS:
      return isSetStatus();
    case STATUS_UPDATES:
      return isSetStatusUpdates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Task)
      return this.equals((Task)that);
    return false;
  }

  public boolean equals(Task that) {
    if (that == null)
      return false;

    boolean this_present_descriptor = true && this.isSetDescriptor();
    boolean that_present_descriptor = true && that.isSetDescriptor();
    if (this_present_descriptor || that_present_descriptor) {
      if (!(this_present_descriptor && that_present_descriptor))
        return false;
      if (!this.descriptor.equals(that.descriptor))
        return false;
    }

    boolean this_present_agentId = true && this.isSetAgentId();
    boolean that_present_agentId = true && that.isSetAgentId();
    if (this_present_agentId || that_present_agentId) {
      if (!(this_present_agentId && that_present_agentId))
        return false;
      if (!this.agentId.equals(that.agentId))
        return false;
    }

    boolean this_present_numFailures = true;
    boolean that_present_numFailures = true;
    if (this_present_numFailures || that_present_numFailures) {
      if (!(this_present_numFailures && that_present_numFailures))
        return false;
      if (this.numFailures != that.numFailures)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_statusUpdates = true && this.isSetStatusUpdates();
    boolean that_present_statusUpdates = true && that.isSetStatusUpdates();
    if (this_present_statusUpdates || that_present_statusUpdates) {
      if (!(this_present_statusUpdates && that_present_statusUpdates))
        return false;
      if (!this.statusUpdates.equals(that.statusUpdates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_descriptor = true && (isSetDescriptor());
    list.add(present_descriptor);
    if (present_descriptor)
      list.add(descriptor);

    boolean present_agentId = true && (isSetAgentId());
    list.add(present_agentId);
    if (present_agentId)
      list.add(agentId);

    boolean present_numFailures = true;
    list.add(present_numFailures);
    if (present_numFailures)
      list.add(numFailures);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_statusUpdates = true && (isSetStatusUpdates());
    list.add(present_statusUpdates);
    if (present_statusUpdates)
      list.add(statusUpdates);

    return list.hashCode();
  }

  @Override
  public int compareTo(Task other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDescriptor()).compareTo(other.isSetDescriptor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescriptor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descriptor, other.descriptor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentId()).compareTo(other.isSetAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentId, other.agentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumFailures()).compareTo(other.isSetNumFailures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumFailures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numFailures, other.numFailures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusUpdates()).compareTo(other.isSetStatusUpdates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusUpdates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusUpdates, other.statusUpdates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Task(");
    boolean first = true;

    sb.append("descriptor:");
    if (this.descriptor == null) {
      sb.append("null");
    } else {
      sb.append(this.descriptor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentId:");
    if (this.agentId == null) {
      sb.append("null");
    } else {
      sb.append(this.agentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numFailures:");
    sb.append(this.numFailures);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusUpdates:");
    if (this.statusUpdates == null) {
      sb.append("null");
    } else {
      sb.append(this.statusUpdates);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (descriptor != null) {
      descriptor.validate();
    }
    if (agentId != null) {
      agentId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskStandardSchemeFactory implements SchemeFactory {
    public TaskStandardScheme getScheme() {
      return new TaskStandardScheme();
    }
  }

  private static class TaskStandardScheme extends StandardScheme<Task> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Task struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DESCRIPTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.descriptor = new TaskDescriptor();
              struct.descriptor.read(iprot);
              struct.setDescriptorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agentId = new AgentID();
              struct.agentId.read(iprot);
              struct.setAgentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_FAILURES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numFailures = iprot.readI32();
              struct.setNumFailuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.apollo.thriftgen.TaskStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS_UPDATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.statusUpdates = new ArrayList<StatusUpdate>(_list8.size);
                StatusUpdate _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new StatusUpdate();
                  _elem9.read(iprot);
                  struct.statusUpdates.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setStatusUpdatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Task struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.descriptor != null) {
        oprot.writeFieldBegin(DESCRIPTOR_FIELD_DESC);
        struct.descriptor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.agentId != null) {
        oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
        struct.agentId.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_FAILURES_FIELD_DESC);
      oprot.writeI32(struct.numFailures);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.statusUpdates != null) {
        oprot.writeFieldBegin(STATUS_UPDATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.statusUpdates.size()));
          for (StatusUpdate _iter11 : struct.statusUpdates)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskTupleSchemeFactory implements SchemeFactory {
    public TaskTupleScheme getScheme() {
      return new TaskTupleScheme();
    }
  }

  private static class TaskTupleScheme extends TupleScheme<Task> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Task struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDescriptor()) {
        optionals.set(0);
      }
      if (struct.isSetAgentId()) {
        optionals.set(1);
      }
      if (struct.isSetNumFailures()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetStatusUpdates()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDescriptor()) {
        struct.descriptor.write(oprot);
      }
      if (struct.isSetAgentId()) {
        struct.agentId.write(oprot);
      }
      if (struct.isSetNumFailures()) {
        oprot.writeI32(struct.numFailures);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetStatusUpdates()) {
        {
          oprot.writeI32(struct.statusUpdates.size());
          for (StatusUpdate _iter12 : struct.statusUpdates)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Task struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.descriptor = new TaskDescriptor();
        struct.descriptor.read(iprot);
        struct.setDescriptorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.agentId = new AgentID();
        struct.agentId.read(iprot);
        struct.setAgentIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.numFailures = iprot.readI32();
        struct.setNumFailuresIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = com.apollo.thriftgen.TaskStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.statusUpdates = new ArrayList<StatusUpdate>(_list13.size);
          StatusUpdate _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new StatusUpdate();
            _elem14.read(iprot);
            struct.statusUpdates.add(_elem14);
          }
        }
        struct.setStatusUpdatesIsSet(true);
      }
    }
  }

}

