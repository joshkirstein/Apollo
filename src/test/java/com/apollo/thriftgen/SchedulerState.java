/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.apollo.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-14")
public class SchedulerState implements org.apache.thrift.TBase<SchedulerState, SchedulerState._Fields>, java.io.Serializable, Cloneable, Comparable<SchedulerState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SchedulerState");

  private static final org.apache.thrift.protocol.TField TASK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("taskList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField REGISTERED_AGENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("registeredAgents", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SchedulerStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SchedulerStateTupleSchemeFactory());
  }

  public List<com.apollo.thriftgen.Task> taskList; // required
  public List<com.apollo.thriftgen.Agent> registeredAgents; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_LIST((short)1, "taskList"),
    REGISTERED_AGENTS((short)2, "registeredAgents");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_LIST
          return TASK_LIST;
        case 2: // REGISTERED_AGENTS
          return REGISTERED_AGENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_LIST, new org.apache.thrift.meta_data.FieldMetaData("taskList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.Task.class))));
    tmpMap.put(_Fields.REGISTERED_AGENTS, new org.apache.thrift.meta_data.FieldMetaData("registeredAgents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.Agent.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SchedulerState.class, metaDataMap);
  }

  public SchedulerState() {
  }

  public SchedulerState(
    List<com.apollo.thriftgen.Task> taskList,
    List<com.apollo.thriftgen.Agent> registeredAgents)
  {
    this();
    this.taskList = taskList;
    this.registeredAgents = registeredAgents;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SchedulerState(SchedulerState other) {
    if (other.isSetTaskList()) {
      List<com.apollo.thriftgen.Task> __this__taskList = new ArrayList<com.apollo.thriftgen.Task>(other.taskList.size());
      for (com.apollo.thriftgen.Task other_element : other.taskList) {
        __this__taskList.add(new com.apollo.thriftgen.Task(other_element));
      }
      this.taskList = __this__taskList;
    }
    if (other.isSetRegisteredAgents()) {
      List<com.apollo.thriftgen.Agent> __this__registeredAgents = new ArrayList<com.apollo.thriftgen.Agent>(other.registeredAgents.size());
      for (com.apollo.thriftgen.Agent other_element : other.registeredAgents) {
        __this__registeredAgents.add(new com.apollo.thriftgen.Agent(other_element));
      }
      this.registeredAgents = __this__registeredAgents;
    }
  }

  public SchedulerState deepCopy() {
    return new SchedulerState(this);
  }

  @Override
  public void clear() {
    this.taskList = null;
    this.registeredAgents = null;
  }

  public int getTaskListSize() {
    return (this.taskList == null) ? 0 : this.taskList.size();
  }

  public java.util.Iterator<com.apollo.thriftgen.Task> getTaskListIterator() {
    return (this.taskList == null) ? null : this.taskList.iterator();
  }

  public void addToTaskList(com.apollo.thriftgen.Task elem) {
    if (this.taskList == null) {
      this.taskList = new ArrayList<com.apollo.thriftgen.Task>();
    }
    this.taskList.add(elem);
  }

  public List<com.apollo.thriftgen.Task> getTaskList() {
    return this.taskList;
  }

  public SchedulerState setTaskList(List<com.apollo.thriftgen.Task> taskList) {
    this.taskList = taskList;
    return this;
  }

  public void unsetTaskList() {
    this.taskList = null;
  }

  /** Returns true if field taskList is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskList() {
    return this.taskList != null;
  }

  public void setTaskListIsSet(boolean value) {
    if (!value) {
      this.taskList = null;
    }
  }

  public int getRegisteredAgentsSize() {
    return (this.registeredAgents == null) ? 0 : this.registeredAgents.size();
  }

  public java.util.Iterator<com.apollo.thriftgen.Agent> getRegisteredAgentsIterator() {
    return (this.registeredAgents == null) ? null : this.registeredAgents.iterator();
  }

  public void addToRegisteredAgents(com.apollo.thriftgen.Agent elem) {
    if (this.registeredAgents == null) {
      this.registeredAgents = new ArrayList<com.apollo.thriftgen.Agent>();
    }
    this.registeredAgents.add(elem);
  }

  public List<com.apollo.thriftgen.Agent> getRegisteredAgents() {
    return this.registeredAgents;
  }

  public SchedulerState setRegisteredAgents(List<com.apollo.thriftgen.Agent> registeredAgents) {
    this.registeredAgents = registeredAgents;
    return this;
  }

  public void unsetRegisteredAgents() {
    this.registeredAgents = null;
  }

  /** Returns true if field registeredAgents is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisteredAgents() {
    return this.registeredAgents != null;
  }

  public void setRegisteredAgentsIsSet(boolean value) {
    if (!value) {
      this.registeredAgents = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_LIST:
      if (value == null) {
        unsetTaskList();
      } else {
        setTaskList((List<com.apollo.thriftgen.Task>)value);
      }
      break;

    case REGISTERED_AGENTS:
      if (value == null) {
        unsetRegisteredAgents();
      } else {
        setRegisteredAgents((List<com.apollo.thriftgen.Agent>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_LIST:
      return getTaskList();

    case REGISTERED_AGENTS:
      return getRegisteredAgents();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_LIST:
      return isSetTaskList();
    case REGISTERED_AGENTS:
      return isSetRegisteredAgents();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SchedulerState)
      return this.equals((SchedulerState)that);
    return false;
  }

  public boolean equals(SchedulerState that) {
    if (that == null)
      return false;

    boolean this_present_taskList = true && this.isSetTaskList();
    boolean that_present_taskList = true && that.isSetTaskList();
    if (this_present_taskList || that_present_taskList) {
      if (!(this_present_taskList && that_present_taskList))
        return false;
      if (!this.taskList.equals(that.taskList))
        return false;
    }

    boolean this_present_registeredAgents = true && this.isSetRegisteredAgents();
    boolean that_present_registeredAgents = true && that.isSetRegisteredAgents();
    if (this_present_registeredAgents || that_present_registeredAgents) {
      if (!(this_present_registeredAgents && that_present_registeredAgents))
        return false;
      if (!this.registeredAgents.equals(that.registeredAgents))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_taskList = true && (isSetTaskList());
    list.add(present_taskList);
    if (present_taskList)
      list.add(taskList);

    boolean present_registeredAgents = true && (isSetRegisteredAgents());
    list.add(present_registeredAgents);
    if (present_registeredAgents)
      list.add(registeredAgents);

    return list.hashCode();
  }

  @Override
  public int compareTo(SchedulerState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskList()).compareTo(other.isSetTaskList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskList, other.taskList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisteredAgents()).compareTo(other.isSetRegisteredAgents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisteredAgents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registeredAgents, other.registeredAgents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SchedulerState(");
    boolean first = true;

    sb.append("taskList:");
    if (this.taskList == null) {
      sb.append("null");
    } else {
      sb.append(this.taskList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("registeredAgents:");
    if (this.registeredAgents == null) {
      sb.append("null");
    } else {
      sb.append(this.registeredAgents);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SchedulerStateStandardSchemeFactory implements SchemeFactory {
    public SchedulerStateStandardScheme getScheme() {
      return new SchedulerStateStandardScheme();
    }
  }

  private static class SchedulerStateStandardScheme extends StandardScheme<SchedulerState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SchedulerState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.taskList = new ArrayList<com.apollo.thriftgen.Task>(_list0.size);
                com.apollo.thriftgen.Task _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.apollo.thriftgen.Task();
                  _elem1.read(iprot);
                  struct.taskList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTaskListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGISTERED_AGENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.registeredAgents = new ArrayList<com.apollo.thriftgen.Agent>(_list3.size);
                com.apollo.thriftgen.Agent _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.apollo.thriftgen.Agent();
                  _elem4.read(iprot);
                  struct.registeredAgents.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setRegisteredAgentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SchedulerState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskList != null) {
        oprot.writeFieldBegin(TASK_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.taskList.size()));
          for (com.apollo.thriftgen.Task _iter6 : struct.taskList)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.registeredAgents != null) {
        oprot.writeFieldBegin(REGISTERED_AGENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.registeredAgents.size()));
          for (com.apollo.thriftgen.Agent _iter7 : struct.registeredAgents)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SchedulerStateTupleSchemeFactory implements SchemeFactory {
    public SchedulerStateTupleScheme getScheme() {
      return new SchedulerStateTupleScheme();
    }
  }

  private static class SchedulerStateTupleScheme extends TupleScheme<SchedulerState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SchedulerState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskList()) {
        optionals.set(0);
      }
      if (struct.isSetRegisteredAgents()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTaskList()) {
        {
          oprot.writeI32(struct.taskList.size());
          for (com.apollo.thriftgen.Task _iter8 : struct.taskList)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetRegisteredAgents()) {
        {
          oprot.writeI32(struct.registeredAgents.size());
          for (com.apollo.thriftgen.Agent _iter9 : struct.registeredAgents)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SchedulerState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.taskList = new ArrayList<com.apollo.thriftgen.Task>(_list10.size);
          com.apollo.thriftgen.Task _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new com.apollo.thriftgen.Task();
            _elem11.read(iprot);
            struct.taskList.add(_elem11);
          }
        }
        struct.setTaskListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.registeredAgents = new ArrayList<com.apollo.thriftgen.Agent>(_list13.size);
          com.apollo.thriftgen.Agent _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new com.apollo.thriftgen.Agent();
            _elem14.read(iprot);
            struct.registeredAgents.add(_elem14);
          }
        }
        struct.setRegisteredAgentsIsSet(true);
      }
    }
  }

}

