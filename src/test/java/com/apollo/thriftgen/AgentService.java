/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.apollo.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-14")
public class AgentService {

  public interface Iface {

    public com.apollo.thriftgen.Response ping(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException;

    public com.apollo.thriftgen.Response getAgentHealth(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException;

    public com.apollo.thriftgen.Response getTaskHealth(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException;

    public com.apollo.thriftgen.Response registerTask(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskDescriptor task) throws AgentTaskRegistrationException, org.apache.thrift.TException;

    public com.apollo.thriftgen.Response killTask(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskID task) throws AgentTaskKillException, org.apache.thrift.TException;

    public com.apollo.thriftgen.Response purge(com.apollo.thriftgen.SchedulerID scheduler) throws AgentTaskPurgeException, org.apache.thrift.TException;

    public com.apollo.thriftgen.Response kill(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException;

    public com.apollo.thriftgen.Response getTaskPorts(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskID task) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAgentHealth(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTaskHealth(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerTask(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskDescriptor task, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void killTask(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskID task, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void purge(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void kill(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTaskPorts(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskID task, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.apollo.thriftgen.Response ping(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException
    {
      send_ping(scheduler);
      return recv_ping();
    }

    public void send_ping(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      args.setScheduler(scheduler);
      sendBase("ping", args);
    }

    public com.apollo.thriftgen.Response recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public com.apollo.thriftgen.Response getAgentHealth(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException
    {
      send_getAgentHealth(scheduler);
      return recv_getAgentHealth();
    }

    public void send_getAgentHealth(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException
    {
      getAgentHealth_args args = new getAgentHealth_args();
      args.setScheduler(scheduler);
      sendBase("getAgentHealth", args);
    }

    public com.apollo.thriftgen.Response recv_getAgentHealth() throws org.apache.thrift.TException
    {
      getAgentHealth_result result = new getAgentHealth_result();
      receiveBase(result, "getAgentHealth");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAgentHealth failed: unknown result");
    }

    public com.apollo.thriftgen.Response getTaskHealth(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException
    {
      send_getTaskHealth(scheduler);
      return recv_getTaskHealth();
    }

    public void send_getTaskHealth(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException
    {
      getTaskHealth_args args = new getTaskHealth_args();
      args.setScheduler(scheduler);
      sendBase("getTaskHealth", args);
    }

    public com.apollo.thriftgen.Response recv_getTaskHealth() throws org.apache.thrift.TException
    {
      getTaskHealth_result result = new getTaskHealth_result();
      receiveBase(result, "getTaskHealth");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTaskHealth failed: unknown result");
    }

    public com.apollo.thriftgen.Response registerTask(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskDescriptor task) throws AgentTaskRegistrationException, org.apache.thrift.TException
    {
      send_registerTask(scheduler, task);
      return recv_registerTask();
    }

    public void send_registerTask(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskDescriptor task) throws org.apache.thrift.TException
    {
      registerTask_args args = new registerTask_args();
      args.setScheduler(scheduler);
      args.setTask(task);
      sendBase("registerTask", args);
    }

    public com.apollo.thriftgen.Response recv_registerTask() throws AgentTaskRegistrationException, org.apache.thrift.TException
    {
      registerTask_result result = new registerTask_result();
      receiveBase(result, "registerTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerTask failed: unknown result");
    }

    public com.apollo.thriftgen.Response killTask(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskID task) throws AgentTaskKillException, org.apache.thrift.TException
    {
      send_killTask(scheduler, task);
      return recv_killTask();
    }

    public void send_killTask(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskID task) throws org.apache.thrift.TException
    {
      killTask_args args = new killTask_args();
      args.setScheduler(scheduler);
      args.setTask(task);
      sendBase("killTask", args);
    }

    public com.apollo.thriftgen.Response recv_killTask() throws AgentTaskKillException, org.apache.thrift.TException
    {
      killTask_result result = new killTask_result();
      receiveBase(result, "killTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "killTask failed: unknown result");
    }

    public com.apollo.thriftgen.Response purge(com.apollo.thriftgen.SchedulerID scheduler) throws AgentTaskPurgeException, org.apache.thrift.TException
    {
      send_purge(scheduler);
      return recv_purge();
    }

    public void send_purge(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException
    {
      purge_args args = new purge_args();
      args.setScheduler(scheduler);
      sendBase("purge", args);
    }

    public com.apollo.thriftgen.Response recv_purge() throws AgentTaskPurgeException, org.apache.thrift.TException
    {
      purge_result result = new purge_result();
      receiveBase(result, "purge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "purge failed: unknown result");
    }

    public com.apollo.thriftgen.Response kill(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException
    {
      send_kill(scheduler);
      return recv_kill();
    }

    public void send_kill(com.apollo.thriftgen.SchedulerID scheduler) throws org.apache.thrift.TException
    {
      kill_args args = new kill_args();
      args.setScheduler(scheduler);
      sendBase("kill", args);
    }

    public com.apollo.thriftgen.Response recv_kill() throws org.apache.thrift.TException
    {
      kill_result result = new kill_result();
      receiveBase(result, "kill");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "kill failed: unknown result");
    }

    public com.apollo.thriftgen.Response getTaskPorts(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskID task) throws org.apache.thrift.TException
    {
      send_getTaskPorts(scheduler, task);
      return recv_getTaskPorts();
    }

    public void send_getTaskPorts(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskID task) throws org.apache.thrift.TException
    {
      getTaskPorts_args args = new getTaskPorts_args();
      args.setScheduler(scheduler);
      args.setTask(task);
      sendBase("getTaskPorts", args);
    }

    public com.apollo.thriftgen.Response recv_getTaskPorts() throws org.apache.thrift.TException
    {
      getTaskPorts_result result = new getTaskPorts_result();
      receiveBase(result, "getTaskPorts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTaskPorts failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(scheduler, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.apollo.thriftgen.SchedulerID scheduler;
      public ping_call(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scheduler = scheduler;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.setScheduler(scheduler);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.apollo.thriftgen.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void getAgentHealth(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAgentHealth_call method_call = new getAgentHealth_call(scheduler, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAgentHealth_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.apollo.thriftgen.SchedulerID scheduler;
      public getAgentHealth_call(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scheduler = scheduler;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAgentHealth", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAgentHealth_args args = new getAgentHealth_args();
        args.setScheduler(scheduler);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.apollo.thriftgen.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAgentHealth();
      }
    }

    public void getTaskHealth(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTaskHealth_call method_call = new getTaskHealth_call(scheduler, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTaskHealth_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.apollo.thriftgen.SchedulerID scheduler;
      public getTaskHealth_call(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scheduler = scheduler;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTaskHealth", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTaskHealth_args args = new getTaskHealth_args();
        args.setScheduler(scheduler);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.apollo.thriftgen.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTaskHealth();
      }
    }

    public void registerTask(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskDescriptor task, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerTask_call method_call = new registerTask_call(scheduler, task, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.apollo.thriftgen.SchedulerID scheduler;
      private com.apollo.thriftgen.TaskDescriptor task;
      public registerTask_call(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskDescriptor task, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scheduler = scheduler;
        this.task = task;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerTask_args args = new registerTask_args();
        args.setScheduler(scheduler);
        args.setTask(task);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.apollo.thriftgen.Response getResult() throws AgentTaskRegistrationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerTask();
      }
    }

    public void killTask(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskID task, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      killTask_call method_call = new killTask_call(scheduler, task, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class killTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.apollo.thriftgen.SchedulerID scheduler;
      private com.apollo.thriftgen.TaskID task;
      public killTask_call(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskID task, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scheduler = scheduler;
        this.task = task;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("killTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        killTask_args args = new killTask_args();
        args.setScheduler(scheduler);
        args.setTask(task);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.apollo.thriftgen.Response getResult() throws AgentTaskKillException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_killTask();
      }
    }

    public void purge(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      purge_call method_call = new purge_call(scheduler, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class purge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.apollo.thriftgen.SchedulerID scheduler;
      public purge_call(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scheduler = scheduler;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("purge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        purge_args args = new purge_args();
        args.setScheduler(scheduler);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.apollo.thriftgen.Response getResult() throws AgentTaskPurgeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_purge();
      }
    }

    public void kill(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      kill_call method_call = new kill_call(scheduler, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class kill_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.apollo.thriftgen.SchedulerID scheduler;
      public kill_call(com.apollo.thriftgen.SchedulerID scheduler, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scheduler = scheduler;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("kill", org.apache.thrift.protocol.TMessageType.CALL, 0));
        kill_args args = new kill_args();
        args.setScheduler(scheduler);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.apollo.thriftgen.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_kill();
      }
    }

    public void getTaskPorts(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskID task, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTaskPorts_call method_call = new getTaskPorts_call(scheduler, task, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTaskPorts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.apollo.thriftgen.SchedulerID scheduler;
      private com.apollo.thriftgen.TaskID task;
      public getTaskPorts_call(com.apollo.thriftgen.SchedulerID scheduler, com.apollo.thriftgen.TaskID task, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scheduler = scheduler;
        this.task = task;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTaskPorts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTaskPorts_args args = new getTaskPorts_args();
        args.setScheduler(scheduler);
        args.setTask(task);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.apollo.thriftgen.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTaskPorts();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getAgentHealth", new getAgentHealth());
      processMap.put("getTaskHealth", new getTaskHealth());
      processMap.put("registerTask", new registerTask());
      processMap.put("killTask", new killTask());
      processMap.put("purge", new purge());
      processMap.put("kill", new kill());
      processMap.put("getTaskPorts", new getTaskPorts());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping(args.scheduler);
        return result;
      }
    }

    public static class getAgentHealth<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAgentHealth_args> {
      public getAgentHealth() {
        super("getAgentHealth");
      }

      public getAgentHealth_args getEmptyArgsInstance() {
        return new getAgentHealth_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAgentHealth_result getResult(I iface, getAgentHealth_args args) throws org.apache.thrift.TException {
        getAgentHealth_result result = new getAgentHealth_result();
        result.success = iface.getAgentHealth(args.scheduler);
        return result;
      }
    }

    public static class getTaskHealth<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTaskHealth_args> {
      public getTaskHealth() {
        super("getTaskHealth");
      }

      public getTaskHealth_args getEmptyArgsInstance() {
        return new getTaskHealth_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTaskHealth_result getResult(I iface, getTaskHealth_args args) throws org.apache.thrift.TException {
        getTaskHealth_result result = new getTaskHealth_result();
        result.success = iface.getTaskHealth(args.scheduler);
        return result;
      }
    }

    public static class registerTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerTask_args> {
      public registerTask() {
        super("registerTask");
      }

      public registerTask_args getEmptyArgsInstance() {
        return new registerTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerTask_result getResult(I iface, registerTask_args args) throws org.apache.thrift.TException {
        registerTask_result result = new registerTask_result();
        try {
          result.success = iface.registerTask(args.scheduler, args.task);
        } catch (AgentTaskRegistrationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class killTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, killTask_args> {
      public killTask() {
        super("killTask");
      }

      public killTask_args getEmptyArgsInstance() {
        return new killTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public killTask_result getResult(I iface, killTask_args args) throws org.apache.thrift.TException {
        killTask_result result = new killTask_result();
        try {
          result.success = iface.killTask(args.scheduler, args.task);
        } catch (AgentTaskKillException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class purge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, purge_args> {
      public purge() {
        super("purge");
      }

      public purge_args getEmptyArgsInstance() {
        return new purge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public purge_result getResult(I iface, purge_args args) throws org.apache.thrift.TException {
        purge_result result = new purge_result();
        try {
          result.success = iface.purge(args.scheduler);
        } catch (AgentTaskPurgeException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class kill<I extends Iface> extends org.apache.thrift.ProcessFunction<I, kill_args> {
      public kill() {
        super("kill");
      }

      public kill_args getEmptyArgsInstance() {
        return new kill_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public kill_result getResult(I iface, kill_args args) throws org.apache.thrift.TException {
        kill_result result = new kill_result();
        result.success = iface.kill(args.scheduler);
        return result;
      }
    }

    public static class getTaskPorts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTaskPorts_args> {
      public getTaskPorts() {
        super("getTaskPorts");
      }

      public getTaskPorts_args getEmptyArgsInstance() {
        return new getTaskPorts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTaskPorts_result getResult(I iface, getTaskPorts_args args) throws org.apache.thrift.TException {
        getTaskPorts_result result = new getTaskPorts_result();
        result.success = iface.getTaskPorts(args.scheduler, args.task);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getAgentHealth", new getAgentHealth());
      processMap.put("getTaskHealth", new getTaskHealth());
      processMap.put("registerTask", new registerTask());
      processMap.put("killTask", new killTask());
      processMap.put("purge", new purge());
      processMap.put("kill", new kill());
      processMap.put("getTaskPorts", new getTaskPorts());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, com.apollo.thriftgen.Response> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<com.apollo.thriftgen.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.apollo.thriftgen.Response>() { 
          public void onComplete(com.apollo.thriftgen.Response o) {
            ping_result result = new ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<com.apollo.thriftgen.Response> resultHandler) throws TException {
        iface.ping(args.scheduler,resultHandler);
      }
    }

    public static class getAgentHealth<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAgentHealth_args, com.apollo.thriftgen.Response> {
      public getAgentHealth() {
        super("getAgentHealth");
      }

      public getAgentHealth_args getEmptyArgsInstance() {
        return new getAgentHealth_args();
      }

      public AsyncMethodCallback<com.apollo.thriftgen.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.apollo.thriftgen.Response>() { 
          public void onComplete(com.apollo.thriftgen.Response o) {
            getAgentHealth_result result = new getAgentHealth_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAgentHealth_result result = new getAgentHealth_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAgentHealth_args args, org.apache.thrift.async.AsyncMethodCallback<com.apollo.thriftgen.Response> resultHandler) throws TException {
        iface.getAgentHealth(args.scheduler,resultHandler);
      }
    }

    public static class getTaskHealth<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTaskHealth_args, com.apollo.thriftgen.Response> {
      public getTaskHealth() {
        super("getTaskHealth");
      }

      public getTaskHealth_args getEmptyArgsInstance() {
        return new getTaskHealth_args();
      }

      public AsyncMethodCallback<com.apollo.thriftgen.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.apollo.thriftgen.Response>() { 
          public void onComplete(com.apollo.thriftgen.Response o) {
            getTaskHealth_result result = new getTaskHealth_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTaskHealth_result result = new getTaskHealth_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTaskHealth_args args, org.apache.thrift.async.AsyncMethodCallback<com.apollo.thriftgen.Response> resultHandler) throws TException {
        iface.getTaskHealth(args.scheduler,resultHandler);
      }
    }

    public static class registerTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerTask_args, com.apollo.thriftgen.Response> {
      public registerTask() {
        super("registerTask");
      }

      public registerTask_args getEmptyArgsInstance() {
        return new registerTask_args();
      }

      public AsyncMethodCallback<com.apollo.thriftgen.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.apollo.thriftgen.Response>() { 
          public void onComplete(com.apollo.thriftgen.Response o) {
            registerTask_result result = new registerTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerTask_result result = new registerTask_result();
            if (e instanceof AgentTaskRegistrationException) {
                        result.ex = (AgentTaskRegistrationException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerTask_args args, org.apache.thrift.async.AsyncMethodCallback<com.apollo.thriftgen.Response> resultHandler) throws TException {
        iface.registerTask(args.scheduler, args.task,resultHandler);
      }
    }

    public static class killTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, killTask_args, com.apollo.thriftgen.Response> {
      public killTask() {
        super("killTask");
      }

      public killTask_args getEmptyArgsInstance() {
        return new killTask_args();
      }

      public AsyncMethodCallback<com.apollo.thriftgen.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.apollo.thriftgen.Response>() { 
          public void onComplete(com.apollo.thriftgen.Response o) {
            killTask_result result = new killTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            killTask_result result = new killTask_result();
            if (e instanceof AgentTaskKillException) {
                        result.ex = (AgentTaskKillException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, killTask_args args, org.apache.thrift.async.AsyncMethodCallback<com.apollo.thriftgen.Response> resultHandler) throws TException {
        iface.killTask(args.scheduler, args.task,resultHandler);
      }
    }

    public static class purge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, purge_args, com.apollo.thriftgen.Response> {
      public purge() {
        super("purge");
      }

      public purge_args getEmptyArgsInstance() {
        return new purge_args();
      }

      public AsyncMethodCallback<com.apollo.thriftgen.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.apollo.thriftgen.Response>() { 
          public void onComplete(com.apollo.thriftgen.Response o) {
            purge_result result = new purge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            purge_result result = new purge_result();
            if (e instanceof AgentTaskPurgeException) {
                        result.ex = (AgentTaskPurgeException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, purge_args args, org.apache.thrift.async.AsyncMethodCallback<com.apollo.thriftgen.Response> resultHandler) throws TException {
        iface.purge(args.scheduler,resultHandler);
      }
    }

    public static class kill<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, kill_args, com.apollo.thriftgen.Response> {
      public kill() {
        super("kill");
      }

      public kill_args getEmptyArgsInstance() {
        return new kill_args();
      }

      public AsyncMethodCallback<com.apollo.thriftgen.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.apollo.thriftgen.Response>() { 
          public void onComplete(com.apollo.thriftgen.Response o) {
            kill_result result = new kill_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            kill_result result = new kill_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, kill_args args, org.apache.thrift.async.AsyncMethodCallback<com.apollo.thriftgen.Response> resultHandler) throws TException {
        iface.kill(args.scheduler,resultHandler);
      }
    }

    public static class getTaskPorts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTaskPorts_args, com.apollo.thriftgen.Response> {
      public getTaskPorts() {
        super("getTaskPorts");
      }

      public getTaskPorts_args getEmptyArgsInstance() {
        return new getTaskPorts_args();
      }

      public AsyncMethodCallback<com.apollo.thriftgen.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.apollo.thriftgen.Response>() { 
          public void onComplete(com.apollo.thriftgen.Response o) {
            getTaskPorts_result result = new getTaskPorts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTaskPorts_result result = new getTaskPorts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTaskPorts_args args, org.apache.thrift.async.AsyncMethodCallback<com.apollo.thriftgen.Response> resultHandler) throws TException {
        iface.getTaskPorts(args.scheduler, args.task,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");

    private static final org.apache.thrift.protocol.TField SCHEDULER_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduler", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }

    public com.apollo.thriftgen.SchedulerID scheduler; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEDULER((short)1, "scheduler");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEDULER
            return SCHEDULER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEDULER, new org.apache.thrift.meta_data.FieldMetaData("scheduler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.SchedulerID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    public ping_args(
      com.apollo.thriftgen.SchedulerID scheduler)
    {
      this();
      this.scheduler = scheduler;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      if (other.isSetScheduler()) {
        this.scheduler = new com.apollo.thriftgen.SchedulerID(other.scheduler);
      }
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
      this.scheduler = null;
    }

    public com.apollo.thriftgen.SchedulerID getScheduler() {
      return this.scheduler;
    }

    public ping_args setScheduler(com.apollo.thriftgen.SchedulerID scheduler) {
      this.scheduler = scheduler;
      return this;
    }

    public void unsetScheduler() {
      this.scheduler = null;
    }

    /** Returns true if field scheduler is set (has been assigned a value) and false otherwise */
    public boolean isSetScheduler() {
      return this.scheduler != null;
    }

    public void setSchedulerIsSet(boolean value) {
      if (!value) {
        this.scheduler = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEDULER:
        if (value == null) {
          unsetScheduler();
        } else {
          setScheduler((com.apollo.thriftgen.SchedulerID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEDULER:
        return getScheduler();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEDULER:
        return isSetScheduler();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      boolean this_present_scheduler = true && this.isSetScheduler();
      boolean that_present_scheduler = true && that.isSetScheduler();
      if (this_present_scheduler || that_present_scheduler) {
        if (!(this_present_scheduler && that_present_scheduler))
          return false;
        if (!this.scheduler.equals(that.scheduler))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scheduler = true && (isSetScheduler());
      list.add(present_scheduler);
      if (present_scheduler)
        list.add(scheduler);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScheduler()).compareTo(other.isSetScheduler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheduler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduler, other.scheduler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append("scheduler:");
      if (this.scheduler == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduler);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (scheduler != null) {
        scheduler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEDULER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scheduler = new com.apollo.thriftgen.SchedulerID();
                struct.scheduler.read(iprot);
                struct.setSchedulerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scheduler != null) {
          oprot.writeFieldBegin(SCHEDULER_FIELD_DESC);
          struct.scheduler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScheduler()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetScheduler()) {
          struct.scheduler.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.scheduler = new com.apollo.thriftgen.SchedulerID();
          struct.scheduler.read(iprot);
          struct.setSchedulerIsSet(true);
        }
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public com.apollo.thriftgen.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      com.apollo.thriftgen.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.apollo.thriftgen.Response(other.success);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.apollo.thriftgen.Response getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(com.apollo.thriftgen.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.apollo.thriftgen.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.apollo.thriftgen.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.apollo.thriftgen.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAgentHealth_args implements org.apache.thrift.TBase<getAgentHealth_args, getAgentHealth_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAgentHealth_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAgentHealth_args");

    private static final org.apache.thrift.protocol.TField SCHEDULER_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduler", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAgentHealth_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAgentHealth_argsTupleSchemeFactory());
    }

    public com.apollo.thriftgen.SchedulerID scheduler; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEDULER((short)1, "scheduler");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEDULER
            return SCHEDULER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEDULER, new org.apache.thrift.meta_data.FieldMetaData("scheduler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.SchedulerID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAgentHealth_args.class, metaDataMap);
    }

    public getAgentHealth_args() {
    }

    public getAgentHealth_args(
      com.apollo.thriftgen.SchedulerID scheduler)
    {
      this();
      this.scheduler = scheduler;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAgentHealth_args(getAgentHealth_args other) {
      if (other.isSetScheduler()) {
        this.scheduler = new com.apollo.thriftgen.SchedulerID(other.scheduler);
      }
    }

    public getAgentHealth_args deepCopy() {
      return new getAgentHealth_args(this);
    }

    @Override
    public void clear() {
      this.scheduler = null;
    }

    public com.apollo.thriftgen.SchedulerID getScheduler() {
      return this.scheduler;
    }

    public getAgentHealth_args setScheduler(com.apollo.thriftgen.SchedulerID scheduler) {
      this.scheduler = scheduler;
      return this;
    }

    public void unsetScheduler() {
      this.scheduler = null;
    }

    /** Returns true if field scheduler is set (has been assigned a value) and false otherwise */
    public boolean isSetScheduler() {
      return this.scheduler != null;
    }

    public void setSchedulerIsSet(boolean value) {
      if (!value) {
        this.scheduler = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEDULER:
        if (value == null) {
          unsetScheduler();
        } else {
          setScheduler((com.apollo.thriftgen.SchedulerID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEDULER:
        return getScheduler();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEDULER:
        return isSetScheduler();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAgentHealth_args)
        return this.equals((getAgentHealth_args)that);
      return false;
    }

    public boolean equals(getAgentHealth_args that) {
      if (that == null)
        return false;

      boolean this_present_scheduler = true && this.isSetScheduler();
      boolean that_present_scheduler = true && that.isSetScheduler();
      if (this_present_scheduler || that_present_scheduler) {
        if (!(this_present_scheduler && that_present_scheduler))
          return false;
        if (!this.scheduler.equals(that.scheduler))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scheduler = true && (isSetScheduler());
      list.add(present_scheduler);
      if (present_scheduler)
        list.add(scheduler);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAgentHealth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScheduler()).compareTo(other.isSetScheduler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheduler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduler, other.scheduler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAgentHealth_args(");
      boolean first = true;

      sb.append("scheduler:");
      if (this.scheduler == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduler);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (scheduler != null) {
        scheduler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAgentHealth_argsStandardSchemeFactory implements SchemeFactory {
      public getAgentHealth_argsStandardScheme getScheme() {
        return new getAgentHealth_argsStandardScheme();
      }
    }

    private static class getAgentHealth_argsStandardScheme extends StandardScheme<getAgentHealth_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAgentHealth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEDULER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scheduler = new com.apollo.thriftgen.SchedulerID();
                struct.scheduler.read(iprot);
                struct.setSchedulerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAgentHealth_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scheduler != null) {
          oprot.writeFieldBegin(SCHEDULER_FIELD_DESC);
          struct.scheduler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAgentHealth_argsTupleSchemeFactory implements SchemeFactory {
      public getAgentHealth_argsTupleScheme getScheme() {
        return new getAgentHealth_argsTupleScheme();
      }
    }

    private static class getAgentHealth_argsTupleScheme extends TupleScheme<getAgentHealth_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAgentHealth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScheduler()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetScheduler()) {
          struct.scheduler.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAgentHealth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.scheduler = new com.apollo.thriftgen.SchedulerID();
          struct.scheduler.read(iprot);
          struct.setSchedulerIsSet(true);
        }
      }
    }

  }

  public static class getAgentHealth_result implements org.apache.thrift.TBase<getAgentHealth_result, getAgentHealth_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAgentHealth_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAgentHealth_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAgentHealth_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAgentHealth_resultTupleSchemeFactory());
    }

    public com.apollo.thriftgen.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAgentHealth_result.class, metaDataMap);
    }

    public getAgentHealth_result() {
    }

    public getAgentHealth_result(
      com.apollo.thriftgen.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAgentHealth_result(getAgentHealth_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.apollo.thriftgen.Response(other.success);
      }
    }

    public getAgentHealth_result deepCopy() {
      return new getAgentHealth_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.apollo.thriftgen.Response getSuccess() {
      return this.success;
    }

    public getAgentHealth_result setSuccess(com.apollo.thriftgen.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.apollo.thriftgen.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAgentHealth_result)
        return this.equals((getAgentHealth_result)that);
      return false;
    }

    public boolean equals(getAgentHealth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAgentHealth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAgentHealth_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAgentHealth_resultStandardSchemeFactory implements SchemeFactory {
      public getAgentHealth_resultStandardScheme getScheme() {
        return new getAgentHealth_resultStandardScheme();
      }
    }

    private static class getAgentHealth_resultStandardScheme extends StandardScheme<getAgentHealth_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAgentHealth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.apollo.thriftgen.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAgentHealth_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAgentHealth_resultTupleSchemeFactory implements SchemeFactory {
      public getAgentHealth_resultTupleScheme getScheme() {
        return new getAgentHealth_resultTupleScheme();
      }
    }

    private static class getAgentHealth_resultTupleScheme extends TupleScheme<getAgentHealth_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAgentHealth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAgentHealth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.apollo.thriftgen.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTaskHealth_args implements org.apache.thrift.TBase<getTaskHealth_args, getTaskHealth_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTaskHealth_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTaskHealth_args");

    private static final org.apache.thrift.protocol.TField SCHEDULER_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduler", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTaskHealth_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTaskHealth_argsTupleSchemeFactory());
    }

    public com.apollo.thriftgen.SchedulerID scheduler; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEDULER((short)1, "scheduler");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEDULER
            return SCHEDULER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEDULER, new org.apache.thrift.meta_data.FieldMetaData("scheduler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.SchedulerID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTaskHealth_args.class, metaDataMap);
    }

    public getTaskHealth_args() {
    }

    public getTaskHealth_args(
      com.apollo.thriftgen.SchedulerID scheduler)
    {
      this();
      this.scheduler = scheduler;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTaskHealth_args(getTaskHealth_args other) {
      if (other.isSetScheduler()) {
        this.scheduler = new com.apollo.thriftgen.SchedulerID(other.scheduler);
      }
    }

    public getTaskHealth_args deepCopy() {
      return new getTaskHealth_args(this);
    }

    @Override
    public void clear() {
      this.scheduler = null;
    }

    public com.apollo.thriftgen.SchedulerID getScheduler() {
      return this.scheduler;
    }

    public getTaskHealth_args setScheduler(com.apollo.thriftgen.SchedulerID scheduler) {
      this.scheduler = scheduler;
      return this;
    }

    public void unsetScheduler() {
      this.scheduler = null;
    }

    /** Returns true if field scheduler is set (has been assigned a value) and false otherwise */
    public boolean isSetScheduler() {
      return this.scheduler != null;
    }

    public void setSchedulerIsSet(boolean value) {
      if (!value) {
        this.scheduler = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEDULER:
        if (value == null) {
          unsetScheduler();
        } else {
          setScheduler((com.apollo.thriftgen.SchedulerID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEDULER:
        return getScheduler();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEDULER:
        return isSetScheduler();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTaskHealth_args)
        return this.equals((getTaskHealth_args)that);
      return false;
    }

    public boolean equals(getTaskHealth_args that) {
      if (that == null)
        return false;

      boolean this_present_scheduler = true && this.isSetScheduler();
      boolean that_present_scheduler = true && that.isSetScheduler();
      if (this_present_scheduler || that_present_scheduler) {
        if (!(this_present_scheduler && that_present_scheduler))
          return false;
        if (!this.scheduler.equals(that.scheduler))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scheduler = true && (isSetScheduler());
      list.add(present_scheduler);
      if (present_scheduler)
        list.add(scheduler);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTaskHealth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScheduler()).compareTo(other.isSetScheduler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheduler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduler, other.scheduler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTaskHealth_args(");
      boolean first = true;

      sb.append("scheduler:");
      if (this.scheduler == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduler);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (scheduler != null) {
        scheduler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTaskHealth_argsStandardSchemeFactory implements SchemeFactory {
      public getTaskHealth_argsStandardScheme getScheme() {
        return new getTaskHealth_argsStandardScheme();
      }
    }

    private static class getTaskHealth_argsStandardScheme extends StandardScheme<getTaskHealth_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTaskHealth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEDULER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scheduler = new com.apollo.thriftgen.SchedulerID();
                struct.scheduler.read(iprot);
                struct.setSchedulerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTaskHealth_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scheduler != null) {
          oprot.writeFieldBegin(SCHEDULER_FIELD_DESC);
          struct.scheduler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTaskHealth_argsTupleSchemeFactory implements SchemeFactory {
      public getTaskHealth_argsTupleScheme getScheme() {
        return new getTaskHealth_argsTupleScheme();
      }
    }

    private static class getTaskHealth_argsTupleScheme extends TupleScheme<getTaskHealth_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTaskHealth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScheduler()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetScheduler()) {
          struct.scheduler.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTaskHealth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.scheduler = new com.apollo.thriftgen.SchedulerID();
          struct.scheduler.read(iprot);
          struct.setSchedulerIsSet(true);
        }
      }
    }

  }

  public static class getTaskHealth_result implements org.apache.thrift.TBase<getTaskHealth_result, getTaskHealth_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTaskHealth_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTaskHealth_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTaskHealth_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTaskHealth_resultTupleSchemeFactory());
    }

    public com.apollo.thriftgen.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTaskHealth_result.class, metaDataMap);
    }

    public getTaskHealth_result() {
    }

    public getTaskHealth_result(
      com.apollo.thriftgen.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTaskHealth_result(getTaskHealth_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.apollo.thriftgen.Response(other.success);
      }
    }

    public getTaskHealth_result deepCopy() {
      return new getTaskHealth_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.apollo.thriftgen.Response getSuccess() {
      return this.success;
    }

    public getTaskHealth_result setSuccess(com.apollo.thriftgen.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.apollo.thriftgen.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTaskHealth_result)
        return this.equals((getTaskHealth_result)that);
      return false;
    }

    public boolean equals(getTaskHealth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTaskHealth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTaskHealth_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTaskHealth_resultStandardSchemeFactory implements SchemeFactory {
      public getTaskHealth_resultStandardScheme getScheme() {
        return new getTaskHealth_resultStandardScheme();
      }
    }

    private static class getTaskHealth_resultStandardScheme extends StandardScheme<getTaskHealth_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTaskHealth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.apollo.thriftgen.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTaskHealth_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTaskHealth_resultTupleSchemeFactory implements SchemeFactory {
      public getTaskHealth_resultTupleScheme getScheme() {
        return new getTaskHealth_resultTupleScheme();
      }
    }

    private static class getTaskHealth_resultTupleScheme extends TupleScheme<getTaskHealth_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTaskHealth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTaskHealth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.apollo.thriftgen.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class registerTask_args implements org.apache.thrift.TBase<registerTask_args, registerTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerTask_args");

    private static final org.apache.thrift.protocol.TField SCHEDULER_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduler", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("task", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerTask_argsTupleSchemeFactory());
    }

    public com.apollo.thriftgen.SchedulerID scheduler; // required
    public com.apollo.thriftgen.TaskDescriptor task; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEDULER((short)1, "scheduler"),
      TASK((short)2, "task");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEDULER
            return SCHEDULER;
          case 2: // TASK
            return TASK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEDULER, new org.apache.thrift.meta_data.FieldMetaData("scheduler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.SchedulerID.class)));
      tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.TaskDescriptor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerTask_args.class, metaDataMap);
    }

    public registerTask_args() {
    }

    public registerTask_args(
      com.apollo.thriftgen.SchedulerID scheduler,
      com.apollo.thriftgen.TaskDescriptor task)
    {
      this();
      this.scheduler = scheduler;
      this.task = task;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerTask_args(registerTask_args other) {
      if (other.isSetScheduler()) {
        this.scheduler = new com.apollo.thriftgen.SchedulerID(other.scheduler);
      }
      if (other.isSetTask()) {
        this.task = new com.apollo.thriftgen.TaskDescriptor(other.task);
      }
    }

    public registerTask_args deepCopy() {
      return new registerTask_args(this);
    }

    @Override
    public void clear() {
      this.scheduler = null;
      this.task = null;
    }

    public com.apollo.thriftgen.SchedulerID getScheduler() {
      return this.scheduler;
    }

    public registerTask_args setScheduler(com.apollo.thriftgen.SchedulerID scheduler) {
      this.scheduler = scheduler;
      return this;
    }

    public void unsetScheduler() {
      this.scheduler = null;
    }

    /** Returns true if field scheduler is set (has been assigned a value) and false otherwise */
    public boolean isSetScheduler() {
      return this.scheduler != null;
    }

    public void setSchedulerIsSet(boolean value) {
      if (!value) {
        this.scheduler = null;
      }
    }

    public com.apollo.thriftgen.TaskDescriptor getTask() {
      return this.task;
    }

    public registerTask_args setTask(com.apollo.thriftgen.TaskDescriptor task) {
      this.task = task;
      return this;
    }

    public void unsetTask() {
      this.task = null;
    }

    /** Returns true if field task is set (has been assigned a value) and false otherwise */
    public boolean isSetTask() {
      return this.task != null;
    }

    public void setTaskIsSet(boolean value) {
      if (!value) {
        this.task = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEDULER:
        if (value == null) {
          unsetScheduler();
        } else {
          setScheduler((com.apollo.thriftgen.SchedulerID)value);
        }
        break;

      case TASK:
        if (value == null) {
          unsetTask();
        } else {
          setTask((com.apollo.thriftgen.TaskDescriptor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEDULER:
        return getScheduler();

      case TASK:
        return getTask();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEDULER:
        return isSetScheduler();
      case TASK:
        return isSetTask();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerTask_args)
        return this.equals((registerTask_args)that);
      return false;
    }

    public boolean equals(registerTask_args that) {
      if (that == null)
        return false;

      boolean this_present_scheduler = true && this.isSetScheduler();
      boolean that_present_scheduler = true && that.isSetScheduler();
      if (this_present_scheduler || that_present_scheduler) {
        if (!(this_present_scheduler && that_present_scheduler))
          return false;
        if (!this.scheduler.equals(that.scheduler))
          return false;
      }

      boolean this_present_task = true && this.isSetTask();
      boolean that_present_task = true && that.isSetTask();
      if (this_present_task || that_present_task) {
        if (!(this_present_task && that_present_task))
          return false;
        if (!this.task.equals(that.task))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scheduler = true && (isSetScheduler());
      list.add(present_scheduler);
      if (present_scheduler)
        list.add(scheduler);

      boolean present_task = true && (isSetTask());
      list.add(present_task);
      if (present_task)
        list.add(task);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScheduler()).compareTo(other.isSetScheduler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheduler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduler, other.scheduler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTask()).compareTo(other.isSetTask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, other.task);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerTask_args(");
      boolean first = true;

      sb.append("scheduler:");
      if (this.scheduler == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduler);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("task:");
      if (this.task == null) {
        sb.append("null");
      } else {
        sb.append(this.task);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (scheduler != null) {
        scheduler.validate();
      }
      if (task != null) {
        task.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerTask_argsStandardSchemeFactory implements SchemeFactory {
      public registerTask_argsStandardScheme getScheme() {
        return new registerTask_argsStandardScheme();
      }
    }

    private static class registerTask_argsStandardScheme extends StandardScheme<registerTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEDULER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scheduler = new com.apollo.thriftgen.SchedulerID();
                struct.scheduler.read(iprot);
                struct.setSchedulerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.task = new com.apollo.thriftgen.TaskDescriptor();
                struct.task.read(iprot);
                struct.setTaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scheduler != null) {
          oprot.writeFieldBegin(SCHEDULER_FIELD_DESC);
          struct.scheduler.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.task != null) {
          oprot.writeFieldBegin(TASK_FIELD_DESC);
          struct.task.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerTask_argsTupleSchemeFactory implements SchemeFactory {
      public registerTask_argsTupleScheme getScheme() {
        return new registerTask_argsTupleScheme();
      }
    }

    private static class registerTask_argsTupleScheme extends TupleScheme<registerTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScheduler()) {
          optionals.set(0);
        }
        if (struct.isSetTask()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetScheduler()) {
          struct.scheduler.write(oprot);
        }
        if (struct.isSetTask()) {
          struct.task.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.scheduler = new com.apollo.thriftgen.SchedulerID();
          struct.scheduler.read(iprot);
          struct.setSchedulerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.task = new com.apollo.thriftgen.TaskDescriptor();
          struct.task.read(iprot);
          struct.setTaskIsSet(true);
        }
      }
    }

  }

  public static class registerTask_result implements org.apache.thrift.TBase<registerTask_result, registerTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerTask_resultTupleSchemeFactory());
    }

    public com.apollo.thriftgen.Response success; // required
    public AgentTaskRegistrationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.Response.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerTask_result.class, metaDataMap);
    }

    public registerTask_result() {
    }

    public registerTask_result(
      com.apollo.thriftgen.Response success,
      AgentTaskRegistrationException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerTask_result(registerTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.apollo.thriftgen.Response(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new AgentTaskRegistrationException(other.ex);
      }
    }

    public registerTask_result deepCopy() {
      return new registerTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public com.apollo.thriftgen.Response getSuccess() {
      return this.success;
    }

    public registerTask_result setSuccess(com.apollo.thriftgen.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AgentTaskRegistrationException getEx() {
      return this.ex;
    }

    public registerTask_result setEx(AgentTaskRegistrationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.apollo.thriftgen.Response)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((AgentTaskRegistrationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerTask_result)
        return this.equals((registerTask_result)that);
      return false;
    }

    public boolean equals(registerTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerTask_resultStandardSchemeFactory implements SchemeFactory {
      public registerTask_resultStandardScheme getScheme() {
        return new registerTask_resultStandardScheme();
      }
    }

    private static class registerTask_resultStandardScheme extends StandardScheme<registerTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.apollo.thriftgen.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new AgentTaskRegistrationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerTask_resultTupleSchemeFactory implements SchemeFactory {
      public registerTask_resultTupleScheme getScheme() {
        return new registerTask_resultTupleScheme();
      }
    }

    private static class registerTask_resultTupleScheme extends TupleScheme<registerTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.apollo.thriftgen.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new AgentTaskRegistrationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class killTask_args implements org.apache.thrift.TBase<killTask_args, killTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<killTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("killTask_args");

    private static final org.apache.thrift.protocol.TField SCHEDULER_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduler", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("task", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new killTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new killTask_argsTupleSchemeFactory());
    }

    public com.apollo.thriftgen.SchedulerID scheduler; // required
    public com.apollo.thriftgen.TaskID task; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEDULER((short)1, "scheduler"),
      TASK((short)2, "task");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEDULER
            return SCHEDULER;
          case 2: // TASK
            return TASK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEDULER, new org.apache.thrift.meta_data.FieldMetaData("scheduler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.SchedulerID.class)));
      tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.TaskID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(killTask_args.class, metaDataMap);
    }

    public killTask_args() {
    }

    public killTask_args(
      com.apollo.thriftgen.SchedulerID scheduler,
      com.apollo.thriftgen.TaskID task)
    {
      this();
      this.scheduler = scheduler;
      this.task = task;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public killTask_args(killTask_args other) {
      if (other.isSetScheduler()) {
        this.scheduler = new com.apollo.thriftgen.SchedulerID(other.scheduler);
      }
      if (other.isSetTask()) {
        this.task = new com.apollo.thriftgen.TaskID(other.task);
      }
    }

    public killTask_args deepCopy() {
      return new killTask_args(this);
    }

    @Override
    public void clear() {
      this.scheduler = null;
      this.task = null;
    }

    public com.apollo.thriftgen.SchedulerID getScheduler() {
      return this.scheduler;
    }

    public killTask_args setScheduler(com.apollo.thriftgen.SchedulerID scheduler) {
      this.scheduler = scheduler;
      return this;
    }

    public void unsetScheduler() {
      this.scheduler = null;
    }

    /** Returns true if field scheduler is set (has been assigned a value) and false otherwise */
    public boolean isSetScheduler() {
      return this.scheduler != null;
    }

    public void setSchedulerIsSet(boolean value) {
      if (!value) {
        this.scheduler = null;
      }
    }

    public com.apollo.thriftgen.TaskID getTask() {
      return this.task;
    }

    public killTask_args setTask(com.apollo.thriftgen.TaskID task) {
      this.task = task;
      return this;
    }

    public void unsetTask() {
      this.task = null;
    }

    /** Returns true if field task is set (has been assigned a value) and false otherwise */
    public boolean isSetTask() {
      return this.task != null;
    }

    public void setTaskIsSet(boolean value) {
      if (!value) {
        this.task = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEDULER:
        if (value == null) {
          unsetScheduler();
        } else {
          setScheduler((com.apollo.thriftgen.SchedulerID)value);
        }
        break;

      case TASK:
        if (value == null) {
          unsetTask();
        } else {
          setTask((com.apollo.thriftgen.TaskID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEDULER:
        return getScheduler();

      case TASK:
        return getTask();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEDULER:
        return isSetScheduler();
      case TASK:
        return isSetTask();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof killTask_args)
        return this.equals((killTask_args)that);
      return false;
    }

    public boolean equals(killTask_args that) {
      if (that == null)
        return false;

      boolean this_present_scheduler = true && this.isSetScheduler();
      boolean that_present_scheduler = true && that.isSetScheduler();
      if (this_present_scheduler || that_present_scheduler) {
        if (!(this_present_scheduler && that_present_scheduler))
          return false;
        if (!this.scheduler.equals(that.scheduler))
          return false;
      }

      boolean this_present_task = true && this.isSetTask();
      boolean that_present_task = true && that.isSetTask();
      if (this_present_task || that_present_task) {
        if (!(this_present_task && that_present_task))
          return false;
        if (!this.task.equals(that.task))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scheduler = true && (isSetScheduler());
      list.add(present_scheduler);
      if (present_scheduler)
        list.add(scheduler);

      boolean present_task = true && (isSetTask());
      list.add(present_task);
      if (present_task)
        list.add(task);

      return list.hashCode();
    }

    @Override
    public int compareTo(killTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScheduler()).compareTo(other.isSetScheduler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheduler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduler, other.scheduler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTask()).compareTo(other.isSetTask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, other.task);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("killTask_args(");
      boolean first = true;

      sb.append("scheduler:");
      if (this.scheduler == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduler);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("task:");
      if (this.task == null) {
        sb.append("null");
      } else {
        sb.append(this.task);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (scheduler != null) {
        scheduler.validate();
      }
      if (task != null) {
        task.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class killTask_argsStandardSchemeFactory implements SchemeFactory {
      public killTask_argsStandardScheme getScheme() {
        return new killTask_argsStandardScheme();
      }
    }

    private static class killTask_argsStandardScheme extends StandardScheme<killTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, killTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEDULER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scheduler = new com.apollo.thriftgen.SchedulerID();
                struct.scheduler.read(iprot);
                struct.setSchedulerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.task = new com.apollo.thriftgen.TaskID();
                struct.task.read(iprot);
                struct.setTaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, killTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scheduler != null) {
          oprot.writeFieldBegin(SCHEDULER_FIELD_DESC);
          struct.scheduler.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.task != null) {
          oprot.writeFieldBegin(TASK_FIELD_DESC);
          struct.task.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class killTask_argsTupleSchemeFactory implements SchemeFactory {
      public killTask_argsTupleScheme getScheme() {
        return new killTask_argsTupleScheme();
      }
    }

    private static class killTask_argsTupleScheme extends TupleScheme<killTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, killTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScheduler()) {
          optionals.set(0);
        }
        if (struct.isSetTask()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetScheduler()) {
          struct.scheduler.write(oprot);
        }
        if (struct.isSetTask()) {
          struct.task.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, killTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.scheduler = new com.apollo.thriftgen.SchedulerID();
          struct.scheduler.read(iprot);
          struct.setSchedulerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.task = new com.apollo.thriftgen.TaskID();
          struct.task.read(iprot);
          struct.setTaskIsSet(true);
        }
      }
    }

  }

  public static class killTask_result implements org.apache.thrift.TBase<killTask_result, killTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<killTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("killTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new killTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new killTask_resultTupleSchemeFactory());
    }

    public com.apollo.thriftgen.Response success; // required
    public AgentTaskKillException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.Response.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(killTask_result.class, metaDataMap);
    }

    public killTask_result() {
    }

    public killTask_result(
      com.apollo.thriftgen.Response success,
      AgentTaskKillException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public killTask_result(killTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.apollo.thriftgen.Response(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new AgentTaskKillException(other.ex);
      }
    }

    public killTask_result deepCopy() {
      return new killTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public com.apollo.thriftgen.Response getSuccess() {
      return this.success;
    }

    public killTask_result setSuccess(com.apollo.thriftgen.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AgentTaskKillException getEx() {
      return this.ex;
    }

    public killTask_result setEx(AgentTaskKillException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.apollo.thriftgen.Response)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((AgentTaskKillException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof killTask_result)
        return this.equals((killTask_result)that);
      return false;
    }

    public boolean equals(killTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(killTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("killTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class killTask_resultStandardSchemeFactory implements SchemeFactory {
      public killTask_resultStandardScheme getScheme() {
        return new killTask_resultStandardScheme();
      }
    }

    private static class killTask_resultStandardScheme extends StandardScheme<killTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, killTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.apollo.thriftgen.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new AgentTaskKillException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, killTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class killTask_resultTupleSchemeFactory implements SchemeFactory {
      public killTask_resultTupleScheme getScheme() {
        return new killTask_resultTupleScheme();
      }
    }

    private static class killTask_resultTupleScheme extends TupleScheme<killTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, killTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, killTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.apollo.thriftgen.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new AgentTaskKillException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class purge_args implements org.apache.thrift.TBase<purge_args, purge_args._Fields>, java.io.Serializable, Cloneable, Comparable<purge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purge_args");

    private static final org.apache.thrift.protocol.TField SCHEDULER_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduler", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purge_argsTupleSchemeFactory());
    }

    public com.apollo.thriftgen.SchedulerID scheduler; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEDULER((short)1, "scheduler");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEDULER
            return SCHEDULER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEDULER, new org.apache.thrift.meta_data.FieldMetaData("scheduler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.SchedulerID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purge_args.class, metaDataMap);
    }

    public purge_args() {
    }

    public purge_args(
      com.apollo.thriftgen.SchedulerID scheduler)
    {
      this();
      this.scheduler = scheduler;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purge_args(purge_args other) {
      if (other.isSetScheduler()) {
        this.scheduler = new com.apollo.thriftgen.SchedulerID(other.scheduler);
      }
    }

    public purge_args deepCopy() {
      return new purge_args(this);
    }

    @Override
    public void clear() {
      this.scheduler = null;
    }

    public com.apollo.thriftgen.SchedulerID getScheduler() {
      return this.scheduler;
    }

    public purge_args setScheduler(com.apollo.thriftgen.SchedulerID scheduler) {
      this.scheduler = scheduler;
      return this;
    }

    public void unsetScheduler() {
      this.scheduler = null;
    }

    /** Returns true if field scheduler is set (has been assigned a value) and false otherwise */
    public boolean isSetScheduler() {
      return this.scheduler != null;
    }

    public void setSchedulerIsSet(boolean value) {
      if (!value) {
        this.scheduler = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEDULER:
        if (value == null) {
          unsetScheduler();
        } else {
          setScheduler((com.apollo.thriftgen.SchedulerID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEDULER:
        return getScheduler();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEDULER:
        return isSetScheduler();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purge_args)
        return this.equals((purge_args)that);
      return false;
    }

    public boolean equals(purge_args that) {
      if (that == null)
        return false;

      boolean this_present_scheduler = true && this.isSetScheduler();
      boolean that_present_scheduler = true && that.isSetScheduler();
      if (this_present_scheduler || that_present_scheduler) {
        if (!(this_present_scheduler && that_present_scheduler))
          return false;
        if (!this.scheduler.equals(that.scheduler))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scheduler = true && (isSetScheduler());
      list.add(present_scheduler);
      if (present_scheduler)
        list.add(scheduler);

      return list.hashCode();
    }

    @Override
    public int compareTo(purge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScheduler()).compareTo(other.isSetScheduler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheduler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduler, other.scheduler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purge_args(");
      boolean first = true;

      sb.append("scheduler:");
      if (this.scheduler == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduler);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (scheduler != null) {
        scheduler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class purge_argsStandardSchemeFactory implements SchemeFactory {
      public purge_argsStandardScheme getScheme() {
        return new purge_argsStandardScheme();
      }
    }

    private static class purge_argsStandardScheme extends StandardScheme<purge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEDULER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scheduler = new com.apollo.thriftgen.SchedulerID();
                struct.scheduler.read(iprot);
                struct.setSchedulerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scheduler != null) {
          oprot.writeFieldBegin(SCHEDULER_FIELD_DESC);
          struct.scheduler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purge_argsTupleSchemeFactory implements SchemeFactory {
      public purge_argsTupleScheme getScheme() {
        return new purge_argsTupleScheme();
      }
    }

    private static class purge_argsTupleScheme extends TupleScheme<purge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScheduler()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetScheduler()) {
          struct.scheduler.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.scheduler = new com.apollo.thriftgen.SchedulerID();
          struct.scheduler.read(iprot);
          struct.setSchedulerIsSet(true);
        }
      }
    }

  }

  public static class purge_result implements org.apache.thrift.TBase<purge_result, purge_result._Fields>, java.io.Serializable, Cloneable, Comparable<purge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purge_resultTupleSchemeFactory());
    }

    public com.apollo.thriftgen.Response success; // required
    public AgentTaskPurgeException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.Response.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purge_result.class, metaDataMap);
    }

    public purge_result() {
    }

    public purge_result(
      com.apollo.thriftgen.Response success,
      AgentTaskPurgeException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purge_result(purge_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.apollo.thriftgen.Response(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new AgentTaskPurgeException(other.ex);
      }
    }

    public purge_result deepCopy() {
      return new purge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public com.apollo.thriftgen.Response getSuccess() {
      return this.success;
    }

    public purge_result setSuccess(com.apollo.thriftgen.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public AgentTaskPurgeException getEx() {
      return this.ex;
    }

    public purge_result setEx(AgentTaskPurgeException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.apollo.thriftgen.Response)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((AgentTaskPurgeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purge_result)
        return this.equals((purge_result)that);
      return false;
    }

    public boolean equals(purge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(purge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class purge_resultStandardSchemeFactory implements SchemeFactory {
      public purge_resultStandardScheme getScheme() {
        return new purge_resultStandardScheme();
      }
    }

    private static class purge_resultStandardScheme extends StandardScheme<purge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.apollo.thriftgen.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new AgentTaskPurgeException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purge_resultTupleSchemeFactory implements SchemeFactory {
      public purge_resultTupleScheme getScheme() {
        return new purge_resultTupleScheme();
      }
    }

    private static class purge_resultTupleScheme extends TupleScheme<purge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.apollo.thriftgen.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new AgentTaskPurgeException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class kill_args implements org.apache.thrift.TBase<kill_args, kill_args._Fields>, java.io.Serializable, Cloneable, Comparable<kill_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kill_args");

    private static final org.apache.thrift.protocol.TField SCHEDULER_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduler", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new kill_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new kill_argsTupleSchemeFactory());
    }

    public com.apollo.thriftgen.SchedulerID scheduler; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEDULER((short)1, "scheduler");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEDULER
            return SCHEDULER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEDULER, new org.apache.thrift.meta_data.FieldMetaData("scheduler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.SchedulerID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kill_args.class, metaDataMap);
    }

    public kill_args() {
    }

    public kill_args(
      com.apollo.thriftgen.SchedulerID scheduler)
    {
      this();
      this.scheduler = scheduler;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kill_args(kill_args other) {
      if (other.isSetScheduler()) {
        this.scheduler = new com.apollo.thriftgen.SchedulerID(other.scheduler);
      }
    }

    public kill_args deepCopy() {
      return new kill_args(this);
    }

    @Override
    public void clear() {
      this.scheduler = null;
    }

    public com.apollo.thriftgen.SchedulerID getScheduler() {
      return this.scheduler;
    }

    public kill_args setScheduler(com.apollo.thriftgen.SchedulerID scheduler) {
      this.scheduler = scheduler;
      return this;
    }

    public void unsetScheduler() {
      this.scheduler = null;
    }

    /** Returns true if field scheduler is set (has been assigned a value) and false otherwise */
    public boolean isSetScheduler() {
      return this.scheduler != null;
    }

    public void setSchedulerIsSet(boolean value) {
      if (!value) {
        this.scheduler = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEDULER:
        if (value == null) {
          unsetScheduler();
        } else {
          setScheduler((com.apollo.thriftgen.SchedulerID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEDULER:
        return getScheduler();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEDULER:
        return isSetScheduler();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof kill_args)
        return this.equals((kill_args)that);
      return false;
    }

    public boolean equals(kill_args that) {
      if (that == null)
        return false;

      boolean this_present_scheduler = true && this.isSetScheduler();
      boolean that_present_scheduler = true && that.isSetScheduler();
      if (this_present_scheduler || that_present_scheduler) {
        if (!(this_present_scheduler && that_present_scheduler))
          return false;
        if (!this.scheduler.equals(that.scheduler))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scheduler = true && (isSetScheduler());
      list.add(present_scheduler);
      if (present_scheduler)
        list.add(scheduler);

      return list.hashCode();
    }

    @Override
    public int compareTo(kill_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScheduler()).compareTo(other.isSetScheduler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheduler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduler, other.scheduler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("kill_args(");
      boolean first = true;

      sb.append("scheduler:");
      if (this.scheduler == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduler);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (scheduler != null) {
        scheduler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kill_argsStandardSchemeFactory implements SchemeFactory {
      public kill_argsStandardScheme getScheme() {
        return new kill_argsStandardScheme();
      }
    }

    private static class kill_argsStandardScheme extends StandardScheme<kill_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kill_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEDULER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scheduler = new com.apollo.thriftgen.SchedulerID();
                struct.scheduler.read(iprot);
                struct.setSchedulerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kill_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scheduler != null) {
          oprot.writeFieldBegin(SCHEDULER_FIELD_DESC);
          struct.scheduler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kill_argsTupleSchemeFactory implements SchemeFactory {
      public kill_argsTupleScheme getScheme() {
        return new kill_argsTupleScheme();
      }
    }

    private static class kill_argsTupleScheme extends TupleScheme<kill_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScheduler()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetScheduler()) {
          struct.scheduler.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.scheduler = new com.apollo.thriftgen.SchedulerID();
          struct.scheduler.read(iprot);
          struct.setSchedulerIsSet(true);
        }
      }
    }

  }

  public static class kill_result implements org.apache.thrift.TBase<kill_result, kill_result._Fields>, java.io.Serializable, Cloneable, Comparable<kill_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kill_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new kill_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new kill_resultTupleSchemeFactory());
    }

    public com.apollo.thriftgen.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kill_result.class, metaDataMap);
    }

    public kill_result() {
    }

    public kill_result(
      com.apollo.thriftgen.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kill_result(kill_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.apollo.thriftgen.Response(other.success);
      }
    }

    public kill_result deepCopy() {
      return new kill_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.apollo.thriftgen.Response getSuccess() {
      return this.success;
    }

    public kill_result setSuccess(com.apollo.thriftgen.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.apollo.thriftgen.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof kill_result)
        return this.equals((kill_result)that);
      return false;
    }

    public boolean equals(kill_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(kill_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("kill_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kill_resultStandardSchemeFactory implements SchemeFactory {
      public kill_resultStandardScheme getScheme() {
        return new kill_resultStandardScheme();
      }
    }

    private static class kill_resultStandardScheme extends StandardScheme<kill_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kill_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.apollo.thriftgen.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kill_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kill_resultTupleSchemeFactory implements SchemeFactory {
      public kill_resultTupleScheme getScheme() {
        return new kill_resultTupleScheme();
      }
    }

    private static class kill_resultTupleScheme extends TupleScheme<kill_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.apollo.thriftgen.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTaskPorts_args implements org.apache.thrift.TBase<getTaskPorts_args, getTaskPorts_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTaskPorts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTaskPorts_args");

    private static final org.apache.thrift.protocol.TField SCHEDULER_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduler", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("task", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTaskPorts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTaskPorts_argsTupleSchemeFactory());
    }

    public com.apollo.thriftgen.SchedulerID scheduler; // required
    public com.apollo.thriftgen.TaskID task; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEDULER((short)1, "scheduler"),
      TASK((short)2, "task");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEDULER
            return SCHEDULER;
          case 2: // TASK
            return TASK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEDULER, new org.apache.thrift.meta_data.FieldMetaData("scheduler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.SchedulerID.class)));
      tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.TaskID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTaskPorts_args.class, metaDataMap);
    }

    public getTaskPorts_args() {
    }

    public getTaskPorts_args(
      com.apollo.thriftgen.SchedulerID scheduler,
      com.apollo.thriftgen.TaskID task)
    {
      this();
      this.scheduler = scheduler;
      this.task = task;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTaskPorts_args(getTaskPorts_args other) {
      if (other.isSetScheduler()) {
        this.scheduler = new com.apollo.thriftgen.SchedulerID(other.scheduler);
      }
      if (other.isSetTask()) {
        this.task = new com.apollo.thriftgen.TaskID(other.task);
      }
    }

    public getTaskPorts_args deepCopy() {
      return new getTaskPorts_args(this);
    }

    @Override
    public void clear() {
      this.scheduler = null;
      this.task = null;
    }

    public com.apollo.thriftgen.SchedulerID getScheduler() {
      return this.scheduler;
    }

    public getTaskPorts_args setScheduler(com.apollo.thriftgen.SchedulerID scheduler) {
      this.scheduler = scheduler;
      return this;
    }

    public void unsetScheduler() {
      this.scheduler = null;
    }

    /** Returns true if field scheduler is set (has been assigned a value) and false otherwise */
    public boolean isSetScheduler() {
      return this.scheduler != null;
    }

    public void setSchedulerIsSet(boolean value) {
      if (!value) {
        this.scheduler = null;
      }
    }

    public com.apollo.thriftgen.TaskID getTask() {
      return this.task;
    }

    public getTaskPorts_args setTask(com.apollo.thriftgen.TaskID task) {
      this.task = task;
      return this;
    }

    public void unsetTask() {
      this.task = null;
    }

    /** Returns true if field task is set (has been assigned a value) and false otherwise */
    public boolean isSetTask() {
      return this.task != null;
    }

    public void setTaskIsSet(boolean value) {
      if (!value) {
        this.task = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCHEDULER:
        if (value == null) {
          unsetScheduler();
        } else {
          setScheduler((com.apollo.thriftgen.SchedulerID)value);
        }
        break;

      case TASK:
        if (value == null) {
          unsetTask();
        } else {
          setTask((com.apollo.thriftgen.TaskID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEDULER:
        return getScheduler();

      case TASK:
        return getTask();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCHEDULER:
        return isSetScheduler();
      case TASK:
        return isSetTask();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTaskPorts_args)
        return this.equals((getTaskPorts_args)that);
      return false;
    }

    public boolean equals(getTaskPorts_args that) {
      if (that == null)
        return false;

      boolean this_present_scheduler = true && this.isSetScheduler();
      boolean that_present_scheduler = true && that.isSetScheduler();
      if (this_present_scheduler || that_present_scheduler) {
        if (!(this_present_scheduler && that_present_scheduler))
          return false;
        if (!this.scheduler.equals(that.scheduler))
          return false;
      }

      boolean this_present_task = true && this.isSetTask();
      boolean that_present_task = true && that.isSetTask();
      if (this_present_task || that_present_task) {
        if (!(this_present_task && that_present_task))
          return false;
        if (!this.task.equals(that.task))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scheduler = true && (isSetScheduler());
      list.add(present_scheduler);
      if (present_scheduler)
        list.add(scheduler);

      boolean present_task = true && (isSetTask());
      list.add(present_task);
      if (present_task)
        list.add(task);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTaskPorts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScheduler()).compareTo(other.isSetScheduler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheduler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduler, other.scheduler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTask()).compareTo(other.isSetTask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, other.task);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTaskPorts_args(");
      boolean first = true;

      sb.append("scheduler:");
      if (this.scheduler == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduler);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("task:");
      if (this.task == null) {
        sb.append("null");
      } else {
        sb.append(this.task);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (scheduler != null) {
        scheduler.validate();
      }
      if (task != null) {
        task.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTaskPorts_argsStandardSchemeFactory implements SchemeFactory {
      public getTaskPorts_argsStandardScheme getScheme() {
        return new getTaskPorts_argsStandardScheme();
      }
    }

    private static class getTaskPorts_argsStandardScheme extends StandardScheme<getTaskPorts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTaskPorts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEDULER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scheduler = new com.apollo.thriftgen.SchedulerID();
                struct.scheduler.read(iprot);
                struct.setSchedulerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.task = new com.apollo.thriftgen.TaskID();
                struct.task.read(iprot);
                struct.setTaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTaskPorts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scheduler != null) {
          oprot.writeFieldBegin(SCHEDULER_FIELD_DESC);
          struct.scheduler.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.task != null) {
          oprot.writeFieldBegin(TASK_FIELD_DESC);
          struct.task.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTaskPorts_argsTupleSchemeFactory implements SchemeFactory {
      public getTaskPorts_argsTupleScheme getScheme() {
        return new getTaskPorts_argsTupleScheme();
      }
    }

    private static class getTaskPorts_argsTupleScheme extends TupleScheme<getTaskPorts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTaskPorts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScheduler()) {
          optionals.set(0);
        }
        if (struct.isSetTask()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetScheduler()) {
          struct.scheduler.write(oprot);
        }
        if (struct.isSetTask()) {
          struct.task.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTaskPorts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.scheduler = new com.apollo.thriftgen.SchedulerID();
          struct.scheduler.read(iprot);
          struct.setSchedulerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.task = new com.apollo.thriftgen.TaskID();
          struct.task.read(iprot);
          struct.setTaskIsSet(true);
        }
      }
    }

  }

  public static class getTaskPorts_result implements org.apache.thrift.TBase<getTaskPorts_result, getTaskPorts_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTaskPorts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTaskPorts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTaskPorts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTaskPorts_resultTupleSchemeFactory());
    }

    public com.apollo.thriftgen.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apollo.thriftgen.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTaskPorts_result.class, metaDataMap);
    }

    public getTaskPorts_result() {
    }

    public getTaskPorts_result(
      com.apollo.thriftgen.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTaskPorts_result(getTaskPorts_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.apollo.thriftgen.Response(other.success);
      }
    }

    public getTaskPorts_result deepCopy() {
      return new getTaskPorts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.apollo.thriftgen.Response getSuccess() {
      return this.success;
    }

    public getTaskPorts_result setSuccess(com.apollo.thriftgen.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.apollo.thriftgen.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTaskPorts_result)
        return this.equals((getTaskPorts_result)that);
      return false;
    }

    public boolean equals(getTaskPorts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTaskPorts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTaskPorts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTaskPorts_resultStandardSchemeFactory implements SchemeFactory {
      public getTaskPorts_resultStandardScheme getScheme() {
        return new getTaskPorts_resultStandardScheme();
      }
    }

    private static class getTaskPorts_resultStandardScheme extends StandardScheme<getTaskPorts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTaskPorts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.apollo.thriftgen.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTaskPorts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTaskPorts_resultTupleSchemeFactory implements SchemeFactory {
      public getTaskPorts_resultTupleScheme getScheme() {
        return new getTaskPorts_resultTupleScheme();
      }
    }

    private static class getTaskPorts_resultTupleScheme extends TupleScheme<getTaskPorts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTaskPorts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTaskPorts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.apollo.thriftgen.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
